#include "gl.h"
/* This file was auto-generated by Galogen */
#include <assert.h>
#if defined(_WIN32)
void* GalogenGetProcAddress(const char *name) {
	static HMODULE opengl32module = NULL;
	static PROC(WINAPI *wgl_get_proc_address)(LPCSTR name) = NULL;
	if (!wgl_get_proc_address) {
		if (!opengl32module) {
			opengl32module = LoadLibraryA("opengl32.dll");
		}
		wgl_get_proc_address = (PROC(WINAPI*)(LPCSTR))GetProcAddress(opengl32module, "wglGetProcAddress");
		assert(wgl_get_proc_address);
	}
	void *ptr = (void *)wgl_get_proc_address(name);
	if (ptr == 0 || (ptr == (void*)1) || (ptr == (void*)2) || (ptr == (void*)3) ||
		(ptr == (void*)-1)) {
		if (opengl32module == NULL) {
			opengl32module = LoadLibraryA("opengl32.dll");
			assert(opengl32module);
		}
		ptr = (void *)GetProcAddress(opengl32module, name);
	}
	return ptr;
}

#elif defined(__APPLE__)
#include <dlfcn.h>

static void* GalogenGetProcAddress(const char *name)
{
	static void* lib = NULL;
	if (NULL == lib)
		lib = dlopen(
			"/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL",
			RTLD_LAZY);
	return lib ? dlsym(lib, name) : NULL;
}
#elif defined(__ANDROID__)
#include <dlfcn.h>
#if GALOGEN_API_VER_MAJ == 3
#define GALOGEN_GLES_LIB "libGLESv3.so"
#elif GALOGEN_API_VER_MAJ == 2
#define GALOGEN_GLES_LIB "libGLESv2.so"
#else
#define GALOGEN_GLES_LIB "libGLESv1_CM.so"
#endif
static void* GalogenGetProcAddress(const char *name)
{
	static void* lib = NULL;
	if (NULL == lib) {
		lib = dlopen(GALOGEN_GLES_LIB, RTLD_LAZY);
		assert(lib);
	}
	return lib ? dlsym(lib, name) : NULL;
}

#else

#include <GL/glx.h>
#define GalogenGetProcAddress(name) (*glXGetProcAddressARB)((const GLubyte*)name)

#endif


static void  GL_APIENTRY _impl_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
	_glptr_glRotated = (PFN_glRotated)GalogenGetProcAddress("glRotated");
	_glptr_glRotated(angle, x, y, z);
}
PFN_glRotated _glptr_glRotated = _impl_glRotated;

static void  GL_APIENTRY _impl_glPushMatrix() {
	_glptr_glPushMatrix = (PFN_glPushMatrix)GalogenGetProcAddress("glPushMatrix");
	_glptr_glPushMatrix();
}
PFN_glPushMatrix _glptr_glPushMatrix = _impl_glPushMatrix;

static void  GL_APIENTRY _impl_glPopMatrix() {
	_glptr_glPopMatrix = (PFN_glPopMatrix)GalogenGetProcAddress("glPopMatrix");
	_glptr_glPopMatrix();
}
PFN_glPopMatrix _glptr_glPopMatrix = _impl_glPopMatrix;

static void  GL_APIENTRY _impl_glMultMatrixf(const GLfloat * m) {
	_glptr_glMultMatrixf = (PFN_glMultMatrixf)GalogenGetProcAddress("glMultMatrixf");
	_glptr_glMultMatrixf(m);
}
PFN_glMultMatrixf _glptr_glMultMatrixf = _impl_glMultMatrixf;

static void  GL_APIENTRY _impl_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	_glptr_glFrustum = (PFN_glFrustum)GalogenGetProcAddress("glFrustum");
	_glptr_glFrustum(left, right, bottom, top, zNear, zFar);
}
PFN_glFrustum _glptr_glFrustum = _impl_glFrustum;

static void  GL_APIENTRY _impl_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) {
	_glptr_glGetTexGenfv = (PFN_glGetTexGenfv)GalogenGetProcAddress("glGetTexGenfv");
	_glptr_glGetTexGenfv(coord, pname, params);
}
PFN_glGetTexGenfv _glptr_glGetTexGenfv = _impl_glGetTexGenfv;

static void  GL_APIENTRY _impl_glGetPixelMapusv(GLenum map, GLushort * values) {
	_glptr_glGetPixelMapusv = (PFN_glGetPixelMapusv)GalogenGetProcAddress("glGetPixelMapusv");
	_glptr_glGetPixelMapusv(map, values);
}
PFN_glGetPixelMapusv _glptr_glGetPixelMapusv = _impl_glGetPixelMapusv;

static void  GL_APIENTRY _impl_glGetPixelMapuiv(GLenum map, GLuint * values) {
	_glptr_glGetPixelMapuiv = (PFN_glGetPixelMapuiv)GalogenGetProcAddress("glGetPixelMapuiv");
	_glptr_glGetPixelMapuiv(map, values);
}
PFN_glGetPixelMapuiv _glptr_glGetPixelMapuiv = _impl_glGetPixelMapuiv;

static void  GL_APIENTRY _impl_glGetMaterialiv(GLenum face, GLenum pname, GLint * params) {
	_glptr_glGetMaterialiv = (PFN_glGetMaterialiv)GalogenGetProcAddress("glGetMaterialiv");
	_glptr_glGetMaterialiv(face, pname, params);
}
PFN_glGetMaterialiv _glptr_glGetMaterialiv = _impl_glGetMaterialiv;

static void  GL_APIENTRY _impl_glGetMapiv(GLenum target, GLenum query, GLint * v) {
	_glptr_glGetMapiv = (PFN_glGetMapiv)GalogenGetProcAddress("glGetMapiv");
	_glptr_glGetMapiv(target, query, v);
}
PFN_glGetMapiv _glptr_glGetMapiv = _impl_glGetMapiv;

static void  GL_APIENTRY _impl_glGetMapfv(GLenum target, GLenum query, GLfloat * v) {
	_glptr_glGetMapfv = (PFN_glGetMapfv)GalogenGetProcAddress("glGetMapfv");
	_glptr_glGetMapfv(target, query, v);
}
PFN_glGetMapfv _glptr_glGetMapfv = _impl_glGetMapfv;

static void  GL_APIENTRY _impl_glGetMapdv(GLenum target, GLenum query, GLdouble * v) {
	_glptr_glGetMapdv = (PFN_glGetMapdv)GalogenGetProcAddress("glGetMapdv");
	_glptr_glGetMapdv(target, query, v);
}
PFN_glGetMapdv _glptr_glGetMapdv = _impl_glGetMapdv;

static void  GL_APIENTRY _impl_glGetLightiv(GLenum light, GLenum pname, GLint * params) {
	_glptr_glGetLightiv = (PFN_glGetLightiv)GalogenGetProcAddress("glGetLightiv");
	_glptr_glGetLightiv(light, pname, params);
}
PFN_glGetLightiv _glptr_glGetLightiv = _impl_glGetLightiv;

static void  GL_APIENTRY _impl_glGetLightfv(GLenum light, GLenum pname, GLfloat * params) {
	_glptr_glGetLightfv = (PFN_glGetLightfv)GalogenGetProcAddress("glGetLightfv");
	_glptr_glGetLightfv(light, pname, params);
}
PFN_glGetLightfv _glptr_glGetLightfv = _impl_glGetLightfv;

static void  GL_APIENTRY _impl_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
	_glptr_glDrawPixels = (PFN_glDrawPixels)GalogenGetProcAddress("glDrawPixels");
	_glptr_glDrawPixels(width, height, format, type, pixels);
}
PFN_glDrawPixels _glptr_glDrawPixels = _impl_glDrawPixels;

static void  GL_APIENTRY _impl_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) {
	_glptr_glPixelMapusv = (PFN_glPixelMapusv)GalogenGetProcAddress("glPixelMapusv");
	_glptr_glPixelMapusv(map, mapsize, values);
}
PFN_glPixelMapusv _glptr_glPixelMapusv = _impl_glPixelMapusv;

static void  GL_APIENTRY _impl_glPixelTransferi(GLenum pname, GLint param) {
	_glptr_glPixelTransferi = (PFN_glPixelTransferi)GalogenGetProcAddress("glPixelTransferi");
	_glptr_glPixelTransferi(pname, param);
}
PFN_glPixelTransferi _glptr_glPixelTransferi = _impl_glPixelTransferi;

static void  GL_APIENTRY _impl_glPixelTransferf(GLenum pname, GLfloat param) {
	_glptr_glPixelTransferf = (PFN_glPixelTransferf)GalogenGetProcAddress("glPixelTransferf");
	_glptr_glPixelTransferf(pname, param);
}
PFN_glPixelTransferf _glptr_glPixelTransferf = _impl_glPixelTransferf;

static void  GL_APIENTRY _impl_glEvalPoint2(GLint i, GLint j) {
	_glptr_glEvalPoint2 = (PFN_glEvalPoint2)GalogenGetProcAddress("glEvalPoint2");
	_glptr_glEvalPoint2(i, j);
}
PFN_glEvalPoint2 _glptr_glEvalPoint2 = _impl_glEvalPoint2;

static void  GL_APIENTRY _impl_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
	_glptr_glRotatef = (PFN_glRotatef)GalogenGetProcAddress("glRotatef");
	_glptr_glRotatef(angle, x, y, z);
}
PFN_glRotatef _glptr_glRotatef = _impl_glRotatef;

static void  GL_APIENTRY _impl_glEvalPoint1(GLint i) {
	_glptr_glEvalPoint1 = (PFN_glEvalPoint1)GalogenGetProcAddress("glEvalPoint1");
	_glptr_glEvalPoint1(i);
}
PFN_glEvalPoint1 _glptr_glEvalPoint1 = _impl_glEvalPoint1;

static void  GL_APIENTRY _impl_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
	_glptr_glEvalMesh1 = (PFN_glEvalMesh1)GalogenGetProcAddress("glEvalMesh1");
	_glptr_glEvalMesh1(mode, i1, i2);
}
PFN_glEvalMesh1 _glptr_glEvalMesh1 = _impl_glEvalMesh1;

static void  GL_APIENTRY _impl_glEvalCoord2fv(const GLfloat * u) {
	_glptr_glEvalCoord2fv = (PFN_glEvalCoord2fv)GalogenGetProcAddress("glEvalCoord2fv");
	_glptr_glEvalCoord2fv(u);
}
PFN_glEvalCoord2fv _glptr_glEvalCoord2fv = _impl_glEvalCoord2fv;

static void  GL_APIENTRY _impl_glEvalCoord2dv(const GLdouble * u) {
	_glptr_glEvalCoord2dv = (PFN_glEvalCoord2dv)GalogenGetProcAddress("glEvalCoord2dv");
	_glptr_glEvalCoord2dv(u);
}
PFN_glEvalCoord2dv _glptr_glEvalCoord2dv = _impl_glEvalCoord2dv;

static void  GL_APIENTRY _impl_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
	_glptr_glTranslatef = (PFN_glTranslatef)GalogenGetProcAddress("glTranslatef");
	_glptr_glTranslatef(x, y, z);
}
PFN_glTranslatef _glptr_glTranslatef = _impl_glTranslatef;

static void  GL_APIENTRY _impl_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
	_glptr_glCopyPixels = (PFN_glCopyPixels)GalogenGetProcAddress("glCopyPixels");
	_glptr_glCopyPixels(x, y, width, height, type);
}
PFN_glCopyPixels _glptr_glCopyPixels = _impl_glCopyPixels;

static void  GL_APIENTRY _impl_glEvalCoord1d(GLdouble u) {
	_glptr_glEvalCoord1d = (PFN_glEvalCoord1d)GalogenGetProcAddress("glEvalCoord1d");
	_glptr_glEvalCoord1d(u);
}
PFN_glEvalCoord1d _glptr_glEvalCoord1d = _impl_glEvalCoord1d;

static void  GL_APIENTRY _impl_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
	_glptr_glMapGrid2f = (PFN_glMapGrid2f)GalogenGetProcAddress("glMapGrid2f");
	_glptr_glMapGrid2f(un, u1, u2, vn, v1, v2);
}
PFN_glMapGrid2f _glptr_glMapGrid2f = _impl_glMapGrid2f;

static void  GL_APIENTRY _impl_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
	_glptr_glMapGrid1d = (PFN_glMapGrid1d)GalogenGetProcAddress("glMapGrid1d");
	_glptr_glMapGrid1d(un, u1, u2);
}
PFN_glMapGrid1d _glptr_glMapGrid1d = _impl_glMapGrid1d;

static void  GL_APIENTRY _impl_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
	_glptr_glMap2d = (PFN_glMap2d)GalogenGetProcAddress("glMap2d");
	_glptr_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFN_glMap2d _glptr_glMap2d = _impl_glMap2d;

static void  GL_APIENTRY _impl_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
	_glptr_glMap1f = (PFN_glMap1f)GalogenGetProcAddress("glMap1f");
	_glptr_glMap1f(target, u1, u2, stride, order, points);
}
PFN_glMap1f _glptr_glMap1f = _impl_glMap1f;

static void  GL_APIENTRY _impl_glPushAttrib(GLbitfield mask) {
	_glptr_glPushAttrib = (PFN_glPushAttrib)GalogenGetProcAddress("glPushAttrib");
	_glptr_glPushAttrib(mask);
}
PFN_glPushAttrib _glptr_glPushAttrib = _impl_glPushAttrib;

static void  GL_APIENTRY _impl_glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) {
	_glptr_glGetTexGendv = (PFN_glGetTexGendv)GalogenGetProcAddress("glGetTexGendv");
	_glptr_glGetTexGendv(coord, pname, params);
}
PFN_glGetTexGendv _glptr_glGetTexGendv = _impl_glGetTexGendv;

static void  GL_APIENTRY _impl_glGetTexEnviv(GLenum target, GLenum pname, GLint * params) {
	_glptr_glGetTexEnviv = (PFN_glGetTexEnviv)GalogenGetProcAddress("glGetTexEnviv");
	_glptr_glGetTexEnviv(target, pname, params);
}
PFN_glGetTexEnviv _glptr_glGetTexEnviv = _impl_glGetTexEnviv;

static void  GL_APIENTRY _impl_glPopAttrib() {
	_glptr_glPopAttrib = (PFN_glPopAttrib)GalogenGetProcAddress("glPopAttrib");
	_glptr_glPopAttrib();
}
PFN_glPopAttrib _glptr_glPopAttrib = _impl_glPopAttrib;

static void  GL_APIENTRY _impl_glAccum(GLenum op, GLfloat value) {
	_glptr_glAccum = (PFN_glAccum)GalogenGetProcAddress("glAccum");
	_glptr_glAccum(op, value);
}
PFN_glAccum _glptr_glAccum = _impl_glAccum;

static void  GL_APIENTRY _impl_glClearIndex(GLfloat c) {
	_glptr_glClearIndex = (PFN_glClearIndex)GalogenGetProcAddress("glClearIndex");
	_glptr_glClearIndex(c);
}
PFN_glClearIndex _glptr_glClearIndex = _impl_glClearIndex;

static void  GL_APIENTRY _impl_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) {
	_glptr_glPixelMapuiv = (PFN_glPixelMapuiv)GalogenGetProcAddress("glPixelMapuiv");
	_glptr_glPixelMapuiv(map, mapsize, values);
}
PFN_glPixelMapuiv _glptr_glPixelMapuiv = _impl_glPixelMapuiv;

static void  GL_APIENTRY _impl_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_glptr_glClearAccum = (PFN_glClearAccum)GalogenGetProcAddress("glClearAccum");
	_glptr_glClearAccum(red, green, blue, alpha);
}
PFN_glClearAccum _glptr_glClearAccum = _impl_glClearAccum;

static void  GL_APIENTRY _impl_glPopName() {
	_glptr_glPopName = (PFN_glPopName)GalogenGetProcAddress("glPopName");
	_glptr_glPopName();
}
PFN_glPopName _glptr_glPopName = _impl_glPopName;

static void  GL_APIENTRY _impl_glPassThrough(GLfloat token) {
	_glptr_glPassThrough = (PFN_glPassThrough)GalogenGetProcAddress("glPassThrough");
	_glptr_glPassThrough(token);
}
PFN_glPassThrough _glptr_glPassThrough = _impl_glPassThrough;

static void  GL_APIENTRY _impl_glLoadName(GLuint name) {
	_glptr_glLoadName = (PFN_glLoadName)GalogenGetProcAddress("glLoadName");
	_glptr_glLoadName(name);
}
PFN_glLoadName _glptr_glLoadName = _impl_glLoadName;

static void  GL_APIENTRY _impl_glInitNames() {
	_glptr_glInitNames = (PFN_glInitNames)GalogenGetProcAddress("glInitNames");
	_glptr_glInitNames();
}
PFN_glInitNames _glptr_glInitNames = _impl_glInitNames;

static GLint GL_APIENTRY _impl_glRenderMode(GLenum mode) {
	_glptr_glRenderMode = (PFN_glRenderMode)GalogenGetProcAddress("glRenderMode");
	return _glptr_glRenderMode(mode);
}
PFN_glRenderMode _glptr_glRenderMode = _impl_glRenderMode;

static void  GL_APIENTRY _impl_glSelectBuffer(GLsizei size, GLuint * buffer) {
	_glptr_glSelectBuffer = (PFN_glSelectBuffer)GalogenGetProcAddress("glSelectBuffer");
	_glptr_glSelectBuffer(size, buffer);
}
PFN_glSelectBuffer _glptr_glSelectBuffer = _impl_glSelectBuffer;

static void  GL_APIENTRY _impl_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) {
	_glptr_glFeedbackBuffer = (PFN_glFeedbackBuffer)GalogenGetProcAddress("glFeedbackBuffer");
	_glptr_glFeedbackBuffer(size, type, buffer);
}
PFN_glFeedbackBuffer _glptr_glFeedbackBuffer = _impl_glFeedbackBuffer;

static void  GL_APIENTRY _impl_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
	_glptr_glTranslated = (PFN_glTranslated)GalogenGetProcAddress("glTranslated");
	_glptr_glTranslated(x, y, z);
}
PFN_glTranslated _glptr_glTranslated = _impl_glTranslated;

static void  GL_APIENTRY _impl_glTexGeni(GLenum coord, GLenum pname, GLint param) {
	_glptr_glTexGeni = (PFN_glTexGeni)GalogenGetProcAddress("glTexGeni");
	_glptr_glTexGeni(coord, pname, param);
}
PFN_glTexGeni _glptr_glTexGeni = _impl_glTexGeni;

static void  GL_APIENTRY _impl_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
	_glptr_glTexGenf = (PFN_glTexGenf)GalogenGetProcAddress("glTexGenf");
	_glptr_glTexGenf(coord, pname, param);
}
PFN_glTexGenf _glptr_glTexGenf = _impl_glTexGenf;

static void  GL_APIENTRY _impl_glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) {
	_glptr_glTexGendv = (PFN_glTexGendv)GalogenGetProcAddress("glTexGendv");
	_glptr_glTexGendv(coord, pname, params);
}
PFN_glTexGendv _glptr_glTexGendv = _impl_glTexGendv;

static void  GL_APIENTRY _impl_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
	_glptr_glTexGend = (PFN_glTexGend)GalogenGetProcAddress("glTexGend");
	_glptr_glTexGend(coord, pname, param);
}
PFN_glTexGend _glptr_glTexGend = _impl_glTexGend;

static void  GL_APIENTRY _impl_glGetPolygonStipple(GLubyte * mask) {
	_glptr_glGetPolygonStipple = (PFN_glGetPolygonStipple)GalogenGetProcAddress("glGetPolygonStipple");
	_glptr_glGetPolygonStipple(mask);
}
PFN_glGetPolygonStipple _glptr_glGetPolygonStipple = _impl_glGetPolygonStipple;

static void  GL_APIENTRY _impl_glPushName(GLuint name) {
	_glptr_glPushName = (PFN_glPushName)GalogenGetProcAddress("glPushName");
	_glptr_glPushName(name);
}
PFN_glPushName _glptr_glPushName = _impl_glPushName;

static void  GL_APIENTRY _impl_glTexEnviv(GLenum target, GLenum pname, const GLint * params) {
	_glptr_glTexEnviv = (PFN_glTexEnviv)GalogenGetProcAddress("glTexEnviv");
	_glptr_glTexEnviv(target, pname, params);
}
PFN_glTexEnviv _glptr_glTexEnviv = _impl_glTexEnviv;

static void  GL_APIENTRY _impl_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
	_glptr_glMap2f = (PFN_glMap2f)GalogenGetProcAddress("glMap2f");
	_glptr_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFN_glMap2f _glptr_glMap2f = _impl_glMap2f;

static void  GL_APIENTRY _impl_glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) {
	_glptr_glTexEnvfv = (PFN_glTexEnvfv)GalogenGetProcAddress("glTexEnvfv");
	_glptr_glTexEnvfv(target, pname, params);
}
PFN_glTexEnvfv _glptr_glTexEnvfv = _impl_glTexEnvfv;

static void  GL_APIENTRY _impl_glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) {
	_glptr_glMaterialfv = (PFN_glMaterialfv)GalogenGetProcAddress("glMaterialfv");
	_glptr_glMaterialfv(face, pname, params);
}
PFN_glMaterialfv _glptr_glMaterialfv = _impl_glMaterialfv;

static void  GL_APIENTRY _impl_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
	_glptr_glMaterialf = (PFN_glMaterialf)GalogenGetProcAddress("glMaterialf");
	_glptr_glMaterialf(face, pname, param);
}
PFN_glMaterialf _glptr_glMaterialf = _impl_glMaterialf;

static void  GL_APIENTRY _impl_glLightModeliv(GLenum pname, const GLint * params) {
	_glptr_glLightModeliv = (PFN_glLightModeliv)GalogenGetProcAddress("glLightModeliv");
	_glptr_glLightModeliv(pname, params);
}
PFN_glLightModeliv _glptr_glLightModeliv = _impl_glLightModeliv;

static void  GL_APIENTRY _impl_glTexGeniv(GLenum coord, GLenum pname, const GLint * params) {
	_glptr_glTexGeniv = (PFN_glTexGeniv)GalogenGetProcAddress("glTexGeniv");
	_glptr_glTexGeniv(coord, pname, params);
}
PFN_glTexGeniv _glptr_glTexGeniv = _impl_glTexGeniv;

static void  GL_APIENTRY _impl_glLightModelfv(GLenum pname, const GLfloat * params) {
	_glptr_glLightModelfv = (PFN_glLightModelfv)GalogenGetProcAddress("glLightModelfv");
	_glptr_glLightModelfv(pname, params);
}
PFN_glLightModelfv _glptr_glLightModelfv = _impl_glLightModelfv;

static void  GL_APIENTRY _impl_glLoadIdentity() {
	_glptr_glLoadIdentity = (PFN_glLoadIdentity)GalogenGetProcAddress("glLoadIdentity");
	_glptr_glLoadIdentity();
}
PFN_glLoadIdentity _glptr_glLoadIdentity = _impl_glLoadIdentity;

static void  GL_APIENTRY _impl_glLightModelf(GLenum pname, GLfloat param) {
	_glptr_glLightModelf = (PFN_glLightModelf)GalogenGetProcAddress("glLightModelf");
	_glptr_glLightModelf(pname, param);
}
PFN_glLightModelf _glptr_glLightModelf = _impl_glLightModelf;

static void  GL_APIENTRY _impl_glLightiv(GLenum light, GLenum pname, const GLint * params) {
	_glptr_glLightiv = (PFN_glLightiv)GalogenGetProcAddress("glLightiv");
	_glptr_glLightiv(light, pname, params);
}
PFN_glLightiv _glptr_glLightiv = _impl_glLightiv;

static void  GL_APIENTRY _impl_glLighti(GLenum light, GLenum pname, GLint param) {
	_glptr_glLighti = (PFN_glLighti)GalogenGetProcAddress("glLighti");
	_glptr_glLighti(light, pname, param);
}
PFN_glLighti _glptr_glLighti = _impl_glLighti;

static void  GL_APIENTRY _impl_glFogi(GLenum pname, GLint param) {
	_glptr_glFogi = (PFN_glFogi)GalogenGetProcAddress("glFogi");
	_glptr_glFogi(pname, param);
}
PFN_glFogi _glptr_glFogi = _impl_glFogi;

static void  GL_APIENTRY _impl_glEvalCoord1fv(const GLfloat * u) {
	_glptr_glEvalCoord1fv = (PFN_glEvalCoord1fv)GalogenGetProcAddress("glEvalCoord1fv");
	_glptr_glEvalCoord1fv(u);
}
PFN_glEvalCoord1fv _glptr_glEvalCoord1fv = _impl_glEvalCoord1fv;

static void  GL_APIENTRY _impl_glFogf(GLenum pname, GLfloat param) {
	_glptr_glFogf = (PFN_glFogf)GalogenGetProcAddress("glFogf");
	_glptr_glFogf(pname, param);
}
PFN_glFogf _glptr_glFogf = _impl_glFogf;

static void  GL_APIENTRY _impl_glColorMaterial(GLenum face, GLenum mode) {
	_glptr_glColorMaterial = (PFN_glColorMaterial)GalogenGetProcAddress("glColorMaterial");
	_glptr_glColorMaterial(face, mode);
}
PFN_glColorMaterial _glptr_glColorMaterial = _impl_glColorMaterial;

static void  GL_APIENTRY _impl_glClipPlane(GLenum plane, const GLdouble * equation) {
	_glptr_glClipPlane = (PFN_glClipPlane)GalogenGetProcAddress("glClipPlane");
	_glptr_glClipPlane(plane, equation);
}
PFN_glClipPlane _glptr_glClipPlane = _impl_glClipPlane;

static void  GL_APIENTRY _impl_glVertex4sv(const GLshort * v) {
	_glptr_glVertex4sv = (PFN_glVertex4sv)GalogenGetProcAddress("glVertex4sv");
	_glptr_glVertex4sv(v);
}
PFN_glVertex4sv _glptr_glVertex4sv = _impl_glVertex4sv;

static void  GL_APIENTRY _impl_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
	_glptr_glVertex4s = (PFN_glVertex4s)GalogenGetProcAddress("glVertex4s");
	_glptr_glVertex4s(x, y, z, w);
}
PFN_glVertex4s _glptr_glVertex4s = _impl_glVertex4s;

static void  GL_APIENTRY _impl_glEvalCoord1dv(const GLdouble * u) {
	_glptr_glEvalCoord1dv = (PFN_glEvalCoord1dv)GalogenGetProcAddress("glEvalCoord1dv");
	_glptr_glEvalCoord1dv(u);
}
PFN_glEvalCoord1dv _glptr_glEvalCoord1dv = _impl_glEvalCoord1dv;

static void  GL_APIENTRY _impl_glFogfv(GLenum pname, const GLfloat * params) {
	_glptr_glFogfv = (PFN_glFogfv)GalogenGetProcAddress("glFogfv");
	_glptr_glFogfv(pname, params);
}
PFN_glFogfv _glptr_glFogfv = _impl_glFogfv;

static void  GL_APIENTRY _impl_glVertex4fv(const GLfloat * v) {
	_glptr_glVertex4fv = (PFN_glVertex4fv)GalogenGetProcAddress("glVertex4fv");
	_glptr_glVertex4fv(v);
}
PFN_glVertex4fv _glptr_glVertex4fv = _impl_glVertex4fv;

static void  GL_APIENTRY _impl_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	_glptr_glVertex4d = (PFN_glVertex4d)GalogenGetProcAddress("glVertex4d");
	_glptr_glVertex4d(x, y, z, w);
}
PFN_glVertex4d _glptr_glVertex4d = _impl_glVertex4d;

static void  GL_APIENTRY _impl_glTexCoord1d(GLdouble s) {
	_glptr_glTexCoord1d = (PFN_glTexCoord1d)GalogenGetProcAddress("glTexCoord1d");
	_glptr_glTexCoord1d(s);
}
PFN_glTexCoord1d _glptr_glTexCoord1d = _impl_glTexCoord1d;

static void  GL_APIENTRY _impl_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
	_glptr_glVertex3f = (PFN_glVertex3f)GalogenGetProcAddress("glVertex3f");
	_glptr_glVertex3f(x, y, z);
}
PFN_glVertex3f _glptr_glVertex3f = _impl_glVertex3f;

static void  GL_APIENTRY _impl_glVertex3dv(const GLdouble * v) {
	_glptr_glVertex3dv = (PFN_glVertex3dv)GalogenGetProcAddress("glVertex3dv");
	_glptr_glVertex3dv(v);
}
PFN_glVertex3dv _glptr_glVertex3dv = _impl_glVertex3dv;

static void  GL_APIENTRY _impl_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
	_glptr_glEvalMesh2 = (PFN_glEvalMesh2)GalogenGetProcAddress("glEvalMesh2");
	_glptr_glEvalMesh2(mode, i1, i2, j1, j2);
}
PFN_glEvalMesh2 _glptr_glEvalMesh2 = _impl_glEvalMesh2;

static void  GL_APIENTRY _impl_glGetFloatv(GLenum pname, GLfloat * data) {
	_glptr_glGetFloatv = (PFN_glGetFloatv)GalogenGetProcAddress("glGetFloatv");
	_glptr_glGetFloatv(pname, data);
}
PFN_glGetFloatv _glptr_glGetFloatv = _impl_glGetFloatv;

static void  GL_APIENTRY _impl_glBegin(GLenum mode) {
	_glptr_glBegin = (PFN_glBegin)GalogenGetProcAddress("glBegin");
	_glptr_glBegin(mode);
}
PFN_glBegin _glptr_glBegin = _impl_glBegin;

static void  GL_APIENTRY _impl_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
	_glptr_glVertex3d = (PFN_glVertex3d)GalogenGetProcAddress("glVertex3d");
	_glptr_glVertex3d(x, y, z);
}
PFN_glVertex3d _glptr_glVertex3d = _impl_glVertex3d;

static void  GL_APIENTRY _impl_glVertex2iv(const GLint * v) {
	_glptr_glVertex2iv = (PFN_glVertex2iv)GalogenGetProcAddress("glVertex2iv");
	_glptr_glVertex2iv(v);
}
PFN_glVertex2iv _glptr_glVertex2iv = _impl_glVertex2iv;

static void  GL_APIENTRY _impl_glTexCoord4sv(const GLshort * v) {
	_glptr_glTexCoord4sv = (PFN_glTexCoord4sv)GalogenGetProcAddress("glTexCoord4sv");
	_glptr_glTexCoord4sv(v);
}
PFN_glTexCoord4sv _glptr_glTexCoord4sv = _impl_glTexCoord4sv;

static void  GL_APIENTRY _impl_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
	_glptr_glTexCoord4i = (PFN_glTexCoord4i)GalogenGetProcAddress("glTexCoord4i");
	_glptr_glTexCoord4i(s, t, r, q);
}
PFN_glTexCoord4i _glptr_glTexCoord4i = _impl_glTexCoord4i;

static void  GL_APIENTRY _impl_glVertex2d(GLdouble x, GLdouble y) {
	_glptr_glVertex2d = (PFN_glVertex2d)GalogenGetProcAddress("glVertex2d");
	_glptr_glVertex2d(x, y);
}
PFN_glVertex2d _glptr_glVertex2d = _impl_glVertex2d;

static void  GL_APIENTRY _impl_glTexCoord4dv(const GLdouble * v) {
	_glptr_glTexCoord4dv = (PFN_glTexCoord4dv)GalogenGetProcAddress("glTexCoord4dv");
	_glptr_glTexCoord4dv(v);
}
PFN_glTexCoord4dv _glptr_glTexCoord4dv = _impl_glTexCoord4dv;

static void  GL_APIENTRY _impl_glEdgeFlagv(const GLboolean * flag) {
	_glptr_glEdgeFlagv = (PFN_glEdgeFlagv)GalogenGetProcAddress("glEdgeFlagv");
	_glptr_glEdgeFlagv(flag);
}
PFN_glEdgeFlagv _glptr_glEdgeFlagv = _impl_glEdgeFlagv;

static void  GL_APIENTRY _impl_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
	_glptr_glTexCoord4d = (PFN_glTexCoord4d)GalogenGetProcAddress("glTexCoord4d");
	_glptr_glTexCoord4d(s, t, r, q);
}
PFN_glTexCoord4d _glptr_glTexCoord4d = _impl_glTexCoord4d;

static void  GL_APIENTRY _impl_glTexCoord2fv(const GLfloat * v) {
	_glptr_glTexCoord2fv = (PFN_glTexCoord2fv)GalogenGetProcAddress("glTexCoord2fv");
	_glptr_glTexCoord2fv(v);
}
PFN_glTexCoord2fv _glptr_glTexCoord2fv = _impl_glTexCoord2fv;

static void  GL_APIENTRY _impl_glTexCoord3i(GLint s, GLint t, GLint r) {
	_glptr_glTexCoord3i = (PFN_glTexCoord3i)GalogenGetProcAddress("glTexCoord3i");
	_glptr_glTexCoord3i(s, t, r);
}
PFN_glTexCoord3i _glptr_glTexCoord3i = _impl_glTexCoord3i;

static void  GL_APIENTRY _impl_glTexCoord3fv(const GLfloat * v) {
	_glptr_glTexCoord3fv = (PFN_glTexCoord3fv)GalogenGetProcAddress("glTexCoord3fv");
	_glptr_glTexCoord3fv(v);
}
PFN_glTexCoord3fv _glptr_glTexCoord3fv = _impl_glTexCoord3fv;

static void  GL_APIENTRY _impl_glTexCoord4fv(const GLfloat * v) {
	_glptr_glTexCoord4fv = (PFN_glTexCoord4fv)GalogenGetProcAddress("glTexCoord4fv");
	_glptr_glTexCoord4fv(v);
}
PFN_glTexCoord4fv _glptr_glTexCoord4fv = _impl_glTexCoord4fv;

static void  GL_APIENTRY _impl_glTexCoord2sv(const GLshort * v) {
	_glptr_glTexCoord2sv = (PFN_glTexCoord2sv)GalogenGetProcAddress("glTexCoord2sv");
	_glptr_glTexCoord2sv(v);
}
PFN_glTexCoord2sv _glptr_glTexCoord2sv = _impl_glTexCoord2sv;

static void  GL_APIENTRY _impl_glRasterPos2dv(const GLdouble * v) {
	_glptr_glRasterPos2dv = (PFN_glRasterPos2dv)GalogenGetProcAddress("glRasterPos2dv");
	_glptr_glRasterPos2dv(v);
}
PFN_glRasterPos2dv _glptr_glRasterPos2dv = _impl_glRasterPos2dv;

static void  GL_APIENTRY _impl_glColor3dv(const GLdouble * v) {
	_glptr_glColor3dv = (PFN_glColor3dv)GalogenGetProcAddress("glColor3dv");
	_glptr_glColor3dv(v);
}
PFN_glColor3dv _glptr_glColor3dv = _impl_glColor3dv;

static void  GL_APIENTRY _impl_glTexCoord2i(GLint s, GLint t) {
	_glptr_glTexCoord2i = (PFN_glTexCoord2i)GalogenGetProcAddress("glTexCoord2i");
	_glptr_glTexCoord2i(s, t);
}
PFN_glTexCoord2i _glptr_glTexCoord2i = _impl_glTexCoord2i;

static void  GL_APIENTRY _impl_glTexCoord2f(GLfloat s, GLfloat t) {
	_glptr_glTexCoord2f = (PFN_glTexCoord2f)GalogenGetProcAddress("glTexCoord2f");
	_glptr_glTexCoord2f(s, t);
}
PFN_glTexCoord2f _glptr_glTexCoord2f = _impl_glTexCoord2f;

static void  GL_APIENTRY _impl_glFlush() {
	_glptr_glFlush = (PFN_glFlush)GalogenGetProcAddress("glFlush");
	_glptr_glFlush();
}
PFN_glFlush _glptr_glFlush = _impl_glFlush;

static void  GL_APIENTRY _impl_glTexCoord1sv(const GLshort * v) {
	_glptr_glTexCoord1sv = (PFN_glTexCoord1sv)GalogenGetProcAddress("glTexCoord1sv");
	_glptr_glTexCoord1sv(v);
}
PFN_glTexCoord1sv _glptr_glTexCoord1sv = _impl_glTexCoord1sv;

static void  GL_APIENTRY _impl_glLoadMatrixf(const GLfloat * m) {
	_glptr_glLoadMatrixf = (PFN_glLoadMatrixf)GalogenGetProcAddress("glLoadMatrixf");
	_glptr_glLoadMatrixf(m);
}
PFN_glLoadMatrixf _glptr_glLoadMatrixf = _impl_glLoadMatrixf;

static void  GL_APIENTRY _impl_glTexCoord1iv(const GLint * v) {
	_glptr_glTexCoord1iv = (PFN_glTexCoord1iv)GalogenGetProcAddress("glTexCoord1iv");
	_glptr_glTexCoord1iv(v);
}
PFN_glTexCoord1iv _glptr_glTexCoord1iv = _impl_glTexCoord1iv;

static void  GL_APIENTRY _impl_glTexCoord1i(GLint s) {
	_glptr_glTexCoord1i = (PFN_glTexCoord1i)GalogenGetProcAddress("glTexCoord1i");
	_glptr_glTexCoord1i(s);
}
PFN_glTexCoord1i _glptr_glTexCoord1i = _impl_glTexCoord1i;

static void  GL_APIENTRY _impl_glTexCoord1fv(const GLfloat * v) {
	_glptr_glTexCoord1fv = (PFN_glTexCoord1fv)GalogenGetProcAddress("glTexCoord1fv");
	_glptr_glTexCoord1fv(v);
}
PFN_glTexCoord1fv _glptr_glTexCoord1fv = _impl_glTexCoord1fv;

static void  GL_APIENTRY _impl_glTexCoord1dv(const GLdouble * v) {
	_glptr_glTexCoord1dv = (PFN_glTexCoord1dv)GalogenGetProcAddress("glTexCoord1dv");
	_glptr_glTexCoord1dv(v);
}
PFN_glTexCoord1dv _glptr_glTexCoord1dv = _impl_glTexCoord1dv;

static void  GL_APIENTRY _impl_glRectfv(const GLfloat * v1, const GLfloat * v2) {
	_glptr_glRectfv = (PFN_glRectfv)GalogenGetProcAddress("glRectfv");
	_glptr_glRectfv(v1, v2);
}
PFN_glRectfv _glptr_glRectfv = _impl_glRectfv;

static void  GL_APIENTRY _impl_glRectdv(const GLdouble * v1, const GLdouble * v2) {
	_glptr_glRectdv = (PFN_glRectdv)GalogenGetProcAddress("glRectdv");
	_glptr_glRectdv(v1, v2);
}
PFN_glRectdv _glptr_glRectdv = _impl_glRectdv;

static void  GL_APIENTRY _impl_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
	_glptr_glRectd = (PFN_glRectd)GalogenGetProcAddress("glRectd");
	_glptr_glRectd(x1, y1, x2, y2);
}
PFN_glRectd _glptr_glRectd = _impl_glRectd;

static void  GL_APIENTRY _impl_glRasterPos3i(GLint x, GLint y, GLint z) {
	_glptr_glRasterPos3i = (PFN_glRasterPos3i)GalogenGetProcAddress("glRasterPos3i");
	_glptr_glRasterPos3i(x, y, z);
}
PFN_glRasterPos3i _glptr_glRasterPos3i = _impl_glRasterPos3i;

static void  GL_APIENTRY _impl_glRasterPos4sv(const GLshort * v) {
	_glptr_glRasterPos4sv = (PFN_glRasterPos4sv)GalogenGetProcAddress("glRasterPos4sv");
	_glptr_glRasterPos4sv(v);
}
PFN_glRasterPos4sv _glptr_glRasterPos4sv = _impl_glRasterPos4sv;

static void  GL_APIENTRY _impl_glTexCoord1s(GLshort s) {
	_glptr_glTexCoord1s = (PFN_glTexCoord1s)GalogenGetProcAddress("glTexCoord1s");
	_glptr_glTexCoord1s(s);
}
PFN_glTexCoord1s _glptr_glTexCoord1s = _impl_glTexCoord1s;

static void  GL_APIENTRY _impl_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
	_glptr_glRasterPos4s = (PFN_glRasterPos4s)GalogenGetProcAddress("glRasterPos4s");
	_glptr_glRasterPos4s(x, y, z, w);
}
PFN_glRasterPos4s _glptr_glRasterPos4s = _impl_glRasterPos4s;

static void  GL_APIENTRY _impl_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
	_glptr_glRasterPos3f = (PFN_glRasterPos3f)GalogenGetProcAddress("glRasterPos3f");
	_glptr_glRasterPos3f(x, y, z);
}
PFN_glRasterPos3f _glptr_glRasterPos3f = _impl_glRasterPos3f;

static void  GL_APIENTRY _impl_glRasterPos4fv(const GLfloat * v) {
	_glptr_glRasterPos4fv = (PFN_glRasterPos4fv)GalogenGetProcAddress("glRasterPos4fv");
	_glptr_glRasterPos4fv(v);
}
PFN_glRasterPos4fv _glptr_glRasterPos4fv = _impl_glRasterPos4fv;

static void  GL_APIENTRY _impl_glIndexiv(const GLint * c) {
	_glptr_glIndexiv = (PFN_glIndexiv)GalogenGetProcAddress("glIndexiv");
	_glptr_glIndexiv(c);
}
PFN_glIndexiv _glptr_glIndexiv = _impl_glIndexiv;

static void  GL_APIENTRY _impl_glVertex2dv(const GLdouble * v) {
	_glptr_glVertex2dv = (PFN_glVertex2dv)GalogenGetProcAddress("glVertex2dv");
	_glptr_glVertex2dv(v);
}
PFN_glVertex2dv _glptr_glVertex2dv = _impl_glVertex2dv;

static void  GL_APIENTRY _impl_glRasterPos2i(GLint x, GLint y) {
	_glptr_glRasterPos2i = (PFN_glRasterPos2i)GalogenGetProcAddress("glRasterPos2i");
	_glptr_glRasterPos2i(x, y);
}
PFN_glRasterPos2i _glptr_glRasterPos2i = _impl_glRasterPos2i;

static void  GL_APIENTRY _impl_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	_glptr_glRasterPos4f = (PFN_glRasterPos4f)GalogenGetProcAddress("glRasterPos4f");
	_glptr_glRasterPos4f(x, y, z, w);
}
PFN_glRasterPos4f _glptr_glRasterPos4f = _impl_glRasterPos4f;

static void  GL_APIENTRY _impl_glVertex3fv(const GLfloat * v) {
	_glptr_glVertex3fv = (PFN_glVertex3fv)GalogenGetProcAddress("glVertex3fv");
	_glptr_glVertex3fv(v);
}
PFN_glVertex3fv _glptr_glVertex3fv = _impl_glVertex3fv;

static void  GL_APIENTRY _impl_glRasterPos4dv(const GLdouble * v) {
	_glptr_glRasterPos4dv = (PFN_glRasterPos4dv)GalogenGetProcAddress("glRasterPos4dv");
	_glptr_glRasterPos4dv(v);
}
PFN_glRasterPos4dv _glptr_glRasterPos4dv = _impl_glRasterPos4dv;

static void  GL_APIENTRY _impl_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	_glptr_glRasterPos4d = (PFN_glRasterPos4d)GalogenGetProcAddress("glRasterPos4d");
	_glptr_glRasterPos4d(x, y, z, w);
}
PFN_glRasterPos4d _glptr_glRasterPos4d = _impl_glRasterPos4d;

static void  GL_APIENTRY _impl_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
	_glptr_glRasterPos3s = (PFN_glRasterPos3s)GalogenGetProcAddress("glRasterPos3s");
	_glptr_glRasterPos3s(x, y, z);
}
PFN_glRasterPos3s _glptr_glRasterPos3s = _impl_glRasterPos3s;

static void  GL_APIENTRY _impl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
	_glptr_glColorMask = (PFN_glColorMask)GalogenGetProcAddress("glColorMask");
	_glptr_glColorMask(red, green, blue, alpha);
}
PFN_glColorMask _glptr_glColorMask = _impl_glColorMask;

static void  GL_APIENTRY _impl_glRasterPos4iv(const GLint * v) {
	_glptr_glRasterPos4iv = (PFN_glRasterPos4iv)GalogenGetProcAddress("glRasterPos4iv");
	_glptr_glRasterPos4iv(v);
}
PFN_glRasterPos4iv _glptr_glRasterPos4iv = _impl_glRasterPos4iv;

static void  GL_APIENTRY _impl_glVertex4dv(const GLdouble * v) {
	_glptr_glVertex4dv = (PFN_glVertex4dv)GalogenGetProcAddress("glVertex4dv");
	_glptr_glVertex4dv(v);
}
PFN_glVertex4dv _glptr_glVertex4dv = _impl_glVertex4dv;

static void  GL_APIENTRY _impl_glEvalCoord2f(GLfloat u, GLfloat v) {
	_glptr_glEvalCoord2f = (PFN_glEvalCoord2f)GalogenGetProcAddress("glEvalCoord2f");
	_glptr_glEvalCoord2f(u, v);
}
PFN_glEvalCoord2f _glptr_glEvalCoord2f = _impl_glEvalCoord2f;

static void  GL_APIENTRY _impl_glGetDoublev(GLenum pname, GLdouble * data) {
	_glptr_glGetDoublev = (PFN_glGetDoublev)GalogenGetProcAddress("glGetDoublev");
	_glptr_glGetDoublev(pname, data);
}
PFN_glGetDoublev _glptr_glGetDoublev = _impl_glGetDoublev;

static void  GL_APIENTRY _impl_glRasterPos3iv(const GLint * v) {
	_glptr_glRasterPos3iv = (PFN_glRasterPos3iv)GalogenGetProcAddress("glRasterPos3iv");
	_glptr_glRasterPos3iv(v);
}
PFN_glRasterPos3iv _glptr_glRasterPos3iv = _impl_glRasterPos3iv;

static void  GL_APIENTRY _impl_glPixelStoref(GLenum pname, GLfloat param) {
	_glptr_glPixelStoref = (PFN_glPixelStoref)GalogenGetProcAddress("glPixelStoref");
	_glptr_glPixelStoref(pname, param);
}
PFN_glPixelStoref _glptr_glPixelStoref = _impl_glPixelStoref;

static void  GL_APIENTRY _impl_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
	_glptr_glRasterPos3d = (PFN_glRasterPos3d)GalogenGetProcAddress("glRasterPos3d");
	_glptr_glRasterPos3d(x, y, z);
}
PFN_glRasterPos3d _glptr_glRasterPos3d = _impl_glRasterPos3d;

static void  GL_APIENTRY _impl_glTexCoord1f(GLfloat s) {
	_glptr_glTexCoord1f = (PFN_glTexCoord1f)GalogenGetProcAddress("glTexCoord1f");
	_glptr_glTexCoord1f(s);
}
PFN_glTexCoord1f _glptr_glTexCoord1f = _impl_glTexCoord1f;

static void  GL_APIENTRY _impl_glLightModeli(GLenum pname, GLint param) {
	_glptr_glLightModeli = (PFN_glLightModeli)GalogenGetProcAddress("glLightModeli");
	_glptr_glLightModeli(pname, param);
}
PFN_glLightModeli _glptr_glLightModeli = _impl_glLightModeli;

static void  GL_APIENTRY _impl_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
	_glptr_glColor3d = (PFN_glColor3d)GalogenGetProcAddress("glColor3d");
	_glptr_glColor3d(red, green, blue);
}
PFN_glColor3d _glptr_glColor3d = _impl_glColor3d;

static void  GL_APIENTRY _impl_glRasterPos2s(GLshort x, GLshort y) {
	_glptr_glRasterPos2s = (PFN_glRasterPos2s)GalogenGetProcAddress("glRasterPos2s");
	_glptr_glRasterPos2s(x, y);
}
PFN_glRasterPos2s _glptr_glRasterPos2s = _impl_glRasterPos2s;

static void  GL_APIENTRY _impl_glRasterPos2iv(const GLint * v) {
	_glptr_glRasterPos2iv = (PFN_glRasterPos2iv)GalogenGetProcAddress("glRasterPos2iv");
	_glptr_glRasterPos2iv(v);
}
PFN_glRasterPos2iv _glptr_glRasterPos2iv = _impl_glRasterPos2iv;

static void  GL_APIENTRY _impl_glRasterPos2d(GLdouble x, GLdouble y) {
	_glptr_glRasterPos2d = (PFN_glRasterPos2d)GalogenGetProcAddress("glRasterPos2d");
	_glptr_glRasterPos2d(x, y);
}
PFN_glRasterPos2d _glptr_glRasterPos2d = _impl_glRasterPos2d;

static void  GL_APIENTRY _impl_glNormal3sv(const GLshort * v) {
	_glptr_glNormal3sv = (PFN_glNormal3sv)GalogenGetProcAddress("glNormal3sv");
	_glptr_glNormal3sv(v);
}
PFN_glNormal3sv _glptr_glNormal3sv = _impl_glNormal3sv;

static void  GL_APIENTRY _impl_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
	_glptr_glNormal3s = (PFN_glNormal3s)GalogenGetProcAddress("glNormal3s");
	_glptr_glNormal3s(nx, ny, nz);
}
PFN_glNormal3s _glptr_glNormal3s = _impl_glNormal3s;

static void  GL_APIENTRY _impl_glNormal3iv(const GLint * v) {
	_glptr_glNormal3iv = (PFN_glNormal3iv)GalogenGetProcAddress("glNormal3iv");
	_glptr_glNormal3iv(v);
}
PFN_glNormal3iv _glptr_glNormal3iv = _impl_glNormal3iv;

static void  GL_APIENTRY _impl_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
	_glptr_glRasterPos4i = (PFN_glRasterPos4i)GalogenGetProcAddress("glRasterPos4i");
	_glptr_glRasterPos4i(x, y, z, w);
}
PFN_glRasterPos4i _glptr_glRasterPos4i = _impl_glRasterPos4i;

static void  GL_APIENTRY _impl_glNormal3i(GLint nx, GLint ny, GLint nz) {
	_glptr_glNormal3i = (PFN_glNormal3i)GalogenGetProcAddress("glNormal3i");
	_glptr_glNormal3i(nx, ny, nz);
}
PFN_glNormal3i _glptr_glNormal3i = _impl_glNormal3i;

static void  GL_APIENTRY _impl_glRasterPos3sv(const GLshort * v) {
	_glptr_glRasterPos3sv = (PFN_glRasterPos3sv)GalogenGetProcAddress("glRasterPos3sv");
	_glptr_glRasterPos3sv(v);
}
PFN_glRasterPos3sv _glptr_glRasterPos3sv = _impl_glRasterPos3sv;

static void  GL_APIENTRY _impl_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
	_glptr_glNormal3f = (PFN_glNormal3f)GalogenGetProcAddress("glNormal3f");
	_glptr_glNormal3f(nx, ny, nz);
}
PFN_glNormal3f _glptr_glNormal3f = _impl_glNormal3f;

static void  GL_APIENTRY _impl_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	_glptr_glOrtho = (PFN_glOrtho)GalogenGetProcAddress("glOrtho");
	_glptr_glOrtho(left, right, bottom, top, zNear, zFar);
}
PFN_glOrtho _glptr_glOrtho = _impl_glOrtho;

static void  GL_APIENTRY _impl_glTexCoord2d(GLdouble s, GLdouble t) {
	_glptr_glTexCoord2d = (PFN_glTexCoord2d)GalogenGetProcAddress("glTexCoord2d");
	_glptr_glTexCoord2d(s, t);
}
PFN_glTexCoord2d _glptr_glTexCoord2d = _impl_glTexCoord2d;

static void  GL_APIENTRY _impl_glNormal3dv(const GLdouble * v) {
	_glptr_glNormal3dv = (PFN_glNormal3dv)GalogenGetProcAddress("glNormal3dv");
	_glptr_glNormal3dv(v);
}
PFN_glNormal3dv _glptr_glNormal3dv = _impl_glNormal3dv;

static void  GL_APIENTRY _impl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
	_glptr_glScissor = (PFN_glScissor)GalogenGetProcAddress("glScissor");
	_glptr_glScissor(x, y, width, height);
}
PFN_glScissor _glptr_glScissor = _impl_glScissor;

static void  GL_APIENTRY _impl_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
	_glptr_glNormal3d = (PFN_glNormal3d)GalogenGetProcAddress("glNormal3d");
	_glptr_glNormal3d(nx, ny, nz);
}
PFN_glNormal3d _glptr_glNormal3d = _impl_glNormal3d;

static void  GL_APIENTRY _impl_glNormal3bv(const GLbyte * v) {
	_glptr_glNormal3bv = (PFN_glNormal3bv)GalogenGetProcAddress("glNormal3bv");
	_glptr_glNormal3bv(v);
}
PFN_glNormal3bv _glptr_glNormal3bv = _impl_glNormal3bv;

static void  GL_APIENTRY _impl_glRasterPos3fv(const GLfloat * v) {
	_glptr_glRasterPos3fv = (PFN_glRasterPos3fv)GalogenGetProcAddress("glRasterPos3fv");
	_glptr_glRasterPos3fv(v);
}
PFN_glRasterPos3fv _glptr_glRasterPos3fv = _impl_glRasterPos3fv;

static void  GL_APIENTRY _impl_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
	_glptr_glNormal3b = (PFN_glNormal3b)GalogenGetProcAddress("glNormal3b");
	_glptr_glNormal3b(nx, ny, nz);
}
PFN_glNormal3b _glptr_glNormal3b = _impl_glNormal3b;

static void  GL_APIENTRY _impl_glIndexi(GLint c) {
	_glptr_glIndexi = (PFN_glIndexi)GalogenGetProcAddress("glIndexi");
	_glptr_glIndexi(c);
}
PFN_glIndexi _glptr_glIndexi = _impl_glIndexi;

static void  GL_APIENTRY _impl_glScalef(GLfloat x, GLfloat y, GLfloat z) {
	_glptr_glScalef = (PFN_glScalef)GalogenGetProcAddress("glScalef");
	_glptr_glScalef(x, y, z);
}
PFN_glScalef _glptr_glScalef = _impl_glScalef;

static void  GL_APIENTRY _impl_glIndexf(GLfloat c) {
	_glptr_glIndexf = (PFN_glIndexf)GalogenGetProcAddress("glIndexf");
	_glptr_glIndexf(c);
}
PFN_glIndexf _glptr_glIndexf = _impl_glIndexf;

static void  GL_APIENTRY _impl_glScaled(GLdouble x, GLdouble y, GLdouble z) {
	_glptr_glScaled = (PFN_glScaled)GalogenGetProcAddress("glScaled");
	_glptr_glScaled(x, y, z);
}
PFN_glScaled _glptr_glScaled = _impl_glScaled;

static void  GL_APIENTRY _impl_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
	_glptr_glVertex4i = (PFN_glVertex4i)GalogenGetProcAddress("glVertex4i");
	_glptr_glVertex4i(x, y, z, w);
}
PFN_glVertex4i _glptr_glVertex4i = _impl_glVertex4i;

static void  GL_APIENTRY _impl_glEnd() {
	_glptr_glEnd = (PFN_glEnd)GalogenGetProcAddress("glEnd");
	_glptr_glEnd();
}
PFN_glEnd _glptr_glEnd = _impl_glEnd;

static void  GL_APIENTRY _impl_glColor4uiv(const GLuint * v) {
	_glptr_glColor4uiv = (PFN_glColor4uiv)GalogenGetProcAddress("glColor4uiv");
	_glptr_glColor4uiv(v);
}
PFN_glColor4uiv _glptr_glColor4uiv = _impl_glColor4uiv;

static void  GL_APIENTRY _impl_glTexCoord2s(GLshort s, GLshort t) {
	_glptr_glTexCoord2s = (PFN_glTexCoord2s)GalogenGetProcAddress("glTexCoord2s");
	_glptr_glTexCoord2s(s, t);
}
PFN_glTexCoord2s _glptr_glTexCoord2s = _impl_glTexCoord2s;

static void  GL_APIENTRY _impl_glIndexd(GLdouble c) {
	_glptr_glIndexd = (PFN_glIndexd)GalogenGetProcAddress("glIndexd");
	_glptr_glIndexd(c);
}
PFN_glIndexd _glptr_glIndexd = _impl_glIndexd;

static void  GL_APIENTRY _impl_glColor4sv(const GLshort * v) {
	_glptr_glColor4sv = (PFN_glColor4sv)GalogenGetProcAddress("glColor4sv");
	_glptr_glColor4sv(v);
}
PFN_glColor4sv _glptr_glColor4sv = _impl_glColor4sv;

static void  GL_APIENTRY _impl_glVertex2f(GLfloat x, GLfloat y) {
	_glptr_glVertex2f = (PFN_glVertex2f)GalogenGetProcAddress("glVertex2f");
	_glptr_glVertex2f(x, y);
}
PFN_glVertex2f _glptr_glVertex2f = _impl_glVertex2f;

static void  GL_APIENTRY _impl_glColor4iv(const GLint * v) {
	_glptr_glColor4iv = (PFN_glColor4iv)GalogenGetProcAddress("glColor4iv");
	_glptr_glColor4iv(v);
}
PFN_glColor4iv _glptr_glColor4iv = _impl_glColor4iv;

static void  GL_APIENTRY _impl_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_glptr_glColor4f = (PFN_glColor4f)GalogenGetProcAddress("glColor4f");
	_glptr_glColor4f(red, green, blue, alpha);
}
PFN_glColor4f _glptr_glColor4f = _impl_glColor4f;

static void  GL_APIENTRY _impl_glIndexMask(GLuint mask) {
	_glptr_glIndexMask = (PFN_glIndexMask)GalogenGetProcAddress("glIndexMask");
	_glptr_glIndexMask(mask);
}
PFN_glIndexMask _glptr_glIndexMask = _impl_glIndexMask;

static void  GL_APIENTRY _impl_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
	_glptr_glTexCoord4s = (PFN_glTexCoord4s)GalogenGetProcAddress("glTexCoord4s");
	_glptr_glTexCoord4s(s, t, r, q);
}
PFN_glTexCoord4s _glptr_glTexCoord4s = _impl_glTexCoord4s;

static void  GL_APIENTRY _impl_glColor4bv(const GLbyte * v) {
	_glptr_glColor4bv = (PFN_glColor4bv)GalogenGetProcAddress("glColor4bv");
	_glptr_glColor4bv(v);
}
PFN_glColor4bv _glptr_glColor4bv = _impl_glColor4bv;

static void  GL_APIENTRY _impl_glVertex2fv(const GLfloat * v) {
	_glptr_glVertex2fv = (PFN_glVertex2fv)GalogenGetProcAddress("glVertex2fv");
	_glptr_glVertex2fv(v);
}
PFN_glVertex2fv _glptr_glVertex2fv = _impl_glVertex2fv;

static void  GL_APIENTRY _impl_glGetBooleanv(GLenum pname, GLboolean * data) {
	_glptr_glGetBooleanv = (PFN_glGetBooleanv)GalogenGetProcAddress("glGetBooleanv");
	_glptr_glGetBooleanv(pname, data);
}
PFN_glGetBooleanv _glptr_glGetBooleanv = _impl_glGetBooleanv;

static void  GL_APIENTRY _impl_glColor3usv(const GLushort * v) {
	_glptr_glColor3usv = (PFN_glColor3usv)GalogenGetProcAddress("glColor3usv");
	_glptr_glColor3usv(v);
}
PFN_glColor3usv _glptr_glColor3usv = _impl_glColor3usv;

static void  GL_APIENTRY _impl_glColor3us(GLushort red, GLushort green, GLushort blue) {
	_glptr_glColor3us = (PFN_glColor3us)GalogenGetProcAddress("glColor3us");
	_glptr_glColor3us(red, green, blue);
}
PFN_glColor3us _glptr_glColor3us = _impl_glColor3us;

static void  GL_APIENTRY _impl_glVertex3s(GLshort x, GLshort y, GLshort z) {
	_glptr_glVertex3s = (PFN_glVertex3s)GalogenGetProcAddress("glVertex3s");
	_glptr_glVertex3s(x, y, z);
}
PFN_glVertex3s _glptr_glVertex3s = _impl_glVertex3s;

static void  GL_APIENTRY _impl_glColor3uiv(const GLuint * v) {
	_glptr_glColor3uiv = (PFN_glColor3uiv)GalogenGetProcAddress("glColor3uiv");
	_glptr_glColor3uiv(v);
}
PFN_glColor3uiv _glptr_glColor3uiv = _impl_glColor3uiv;

static void  GL_APIENTRY _impl_glEdgeFlag(GLboolean flag) {
	_glptr_glEdgeFlag = (PFN_glEdgeFlag)GalogenGetProcAddress("glEdgeFlag");
	_glptr_glEdgeFlag(flag);
}
PFN_glEdgeFlag _glptr_glEdgeFlag = _impl_glEdgeFlag;

static void  GL_APIENTRY _impl_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
	_glptr_glBitmap = (PFN_glBitmap)GalogenGetProcAddress("glBitmap");
	_glptr_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
PFN_glBitmap _glptr_glBitmap = _impl_glBitmap;

static void  GL_APIENTRY _impl_glColor3ui(GLuint red, GLuint green, GLuint blue) {
	_glptr_glColor3ui = (PFN_glColor3ui)GalogenGetProcAddress("glColor3ui");
	_glptr_glColor3ui(red, green, blue);
}
PFN_glColor3ui _glptr_glColor3ui = _impl_glColor3ui;

static GLboolean GL_APIENTRY _impl_glIsList(GLuint list) {
	_glptr_glIsList = (PFN_glIsList)GalogenGetProcAddress("glIsList");
	return _glptr_glIsList(list);
}
PFN_glIsList _glptr_glIsList = _impl_glIsList;

static void  GL_APIENTRY _impl_glColor3i(GLint red, GLint green, GLint blue) {
	_glptr_glColor3i = (PFN_glColor3i)GalogenGetProcAddress("glColor3i");
	_glptr_glColor3i(red, green, blue);
}
PFN_glColor3i _glptr_glColor3i = _impl_glColor3i;

static void  GL_APIENTRY _impl_glColor4dv(const GLdouble * v) {
	_glptr_glColor4dv = (PFN_glColor4dv)GalogenGetProcAddress("glColor4dv");
	_glptr_glColor4dv(v);
}
PFN_glColor4dv _glptr_glColor4dv = _impl_glColor4dv;

static void  GL_APIENTRY _impl_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) {
	_glptr_glPixelMapfv = (PFN_glPixelMapfv)GalogenGetProcAddress("glPixelMapfv");
	_glptr_glPixelMapfv(map, mapsize, values);
}
PFN_glPixelMapfv _glptr_glPixelMapfv = _impl_glPixelMapfv;

static void  GL_APIENTRY _impl_glFinish() {
	_glptr_glFinish = (PFN_glFinish)GalogenGetProcAddress("glFinish");
	_glptr_glFinish();
}
PFN_glFinish _glptr_glFinish = _impl_glFinish;

static void  GL_APIENTRY _impl_glMultMatrixd(const GLdouble * m) {
	_glptr_glMultMatrixd = (PFN_glMultMatrixd)GalogenGetProcAddress("glMultMatrixd");
	_glptr_glMultMatrixd(m);
}
PFN_glMultMatrixd _glptr_glMultMatrixd = _impl_glMultMatrixd;

static void  GL_APIENTRY _impl_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
	_glptr_glMapGrid1f = (PFN_glMapGrid1f)GalogenGetProcAddress("glMapGrid1f");
	_glptr_glMapGrid1f(un, u1, u2);
}
PFN_glMapGrid1f _glptr_glMapGrid1f = _impl_glMapGrid1f;

static void  GL_APIENTRY _impl_glColor3iv(const GLint * v) {
	_glptr_glColor3iv = (PFN_glColor3iv)GalogenGetProcAddress("glColor3iv");
	_glptr_glColor3iv(v);
}
PFN_glColor3iv _glptr_glColor3iv = _impl_glColor3iv;

static void  GL_APIENTRY _impl_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
	_glptr_glColor3ub = (PFN_glColor3ub)GalogenGetProcAddress("glColor3ub");
	_glptr_glColor3ub(red, green, blue);
}
PFN_glColor3ub _glptr_glColor3ub = _impl_glColor3ub;

static void  GL_APIENTRY _impl_glTexCoord4iv(const GLint * v) {
	_glptr_glTexCoord4iv = (PFN_glTexCoord4iv)GalogenGetProcAddress("glTexCoord4iv");
	_glptr_glTexCoord4iv(v);
}
PFN_glTexCoord4iv _glptr_glTexCoord4iv = _impl_glTexCoord4iv;

static void  GL_APIENTRY _impl_glCallLists(GLsizei n, GLenum type, const void * lists) {
	_glptr_glCallLists = (PFN_glCallLists)GalogenGetProcAddress("glCallLists");
	_glptr_glCallLists(n, type, lists);
}
PFN_glCallLists _glptr_glCallLists = _impl_glCallLists;

static void  GL_APIENTRY _impl_glIndexs(GLshort c) {
	_glptr_glIndexs = (PFN_glIndexs)GalogenGetProcAddress("glIndexs");
	_glptr_glIndexs(c);
}
PFN_glIndexs _glptr_glIndexs = _impl_glIndexs;

static void  GL_APIENTRY _impl_glEvalCoord1f(GLfloat u) {
	_glptr_glEvalCoord1f = (PFN_glEvalCoord1f)GalogenGetProcAddress("glEvalCoord1f");
	_glptr_glEvalCoord1f(u);
}
PFN_glEvalCoord1f _glptr_glEvalCoord1f = _impl_glEvalCoord1f;

static void  GL_APIENTRY _impl_glIndexsv(const GLshort * c) {
	_glptr_glIndexsv = (PFN_glIndexsv)GalogenGetProcAddress("glIndexsv");
	_glptr_glIndexsv(c);
}
PFN_glIndexsv _glptr_glIndexsv = _impl_glIndexsv;

static void  GL_APIENTRY _impl_glColor3sv(const GLshort * v) {
	_glptr_glColor3sv = (PFN_glColor3sv)GalogenGetProcAddress("glColor3sv");
	_glptr_glColor3sv(v);
}
PFN_glColor3sv _glptr_glColor3sv = _impl_glColor3sv;

static void  GL_APIENTRY _impl_glColor3s(GLshort red, GLshort green, GLshort blue) {
	_glptr_glColor3s = (PFN_glColor3s)GalogenGetProcAddress("glColor3s");
	_glptr_glColor3s(red, green, blue);
}
PFN_glColor3s _glptr_glColor3s = _impl_glColor3s;

static void  GL_APIENTRY _impl_glGetClipPlane(GLenum plane, GLdouble * equation) {
	_glptr_glGetClipPlane = (PFN_glGetClipPlane)GalogenGetProcAddress("glGetClipPlane");
	_glptr_glGetClipPlane(plane, equation);
}
PFN_glGetClipPlane _glptr_glGetClipPlane = _impl_glGetClipPlane;

static void  GL_APIENTRY _impl_glListBase(GLuint base) {
	_glptr_glListBase = (PFN_glListBase)GalogenGetProcAddress("glListBase");
	_glptr_glListBase(base);
}
PFN_glListBase _glptr_glListBase = _impl_glListBase;

static void  GL_APIENTRY _impl_glHint(GLenum target, GLenum mode) {
	_glptr_glHint = (PFN_glHint)GalogenGetProcAddress("glHint");
	_glptr_glHint(target, mode);
}
PFN_glHint _glptr_glHint = _impl_glHint;

static void  GL_APIENTRY _impl_glPolygonMode(GLenum face, GLenum mode) {
	_glptr_glPolygonMode = (PFN_glPolygonMode)GalogenGetProcAddress("glPolygonMode");
	_glptr_glPolygonMode(face, mode);
}
PFN_glPolygonMode _glptr_glPolygonMode = _impl_glPolygonMode;

static void  GL_APIENTRY _impl_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
	_glptr_glColor4us = (PFN_glColor4us)GalogenGetProcAddress("glColor4us");
	_glptr_glColor4us(red, green, blue, alpha);
}
PFN_glColor4us _glptr_glColor4us = _impl_glColor4us;

static void  GL_APIENTRY _impl_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
	_glptr_glTexCoord3s = (PFN_glTexCoord3s)GalogenGetProcAddress("glTexCoord3s");
	_glptr_glTexCoord3s(s, t, r);
}
PFN_glTexCoord3s _glptr_glTexCoord3s = _impl_glTexCoord3s;

static void  GL_APIENTRY _impl_glColor4fv(const GLfloat * v) {
	_glptr_glColor4fv = (PFN_glColor4fv)GalogenGetProcAddress("glColor4fv");
	_glptr_glColor4fv(v);
}
PFN_glColor4fv _glptr_glColor4fv = _impl_glColor4fv;

static void  GL_APIENTRY _impl_glLoadMatrixd(const GLdouble * m) {
	_glptr_glLoadMatrixd = (PFN_glLoadMatrixd)GalogenGetProcAddress("glLoadMatrixd");
	_glptr_glLoadMatrixd(m);
}
PFN_glLoadMatrixd _glptr_glLoadMatrixd = _impl_glLoadMatrixd;

static void  GL_APIENTRY _impl_glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) {
	_glptr_glGetTexGeniv = (PFN_glGetTexGeniv)GalogenGetProcAddress("glGetTexGeniv");
	_glptr_glGetTexGeniv(coord, pname, params);
}
PFN_glGetTexGeniv _glptr_glGetTexGeniv = _impl_glGetTexGeniv;

static void  GL_APIENTRY _impl_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
	_glptr_glPixelZoom = (PFN_glPixelZoom)GalogenGetProcAddress("glPixelZoom");
	_glptr_glPixelZoom(xfactor, yfactor);
}
PFN_glPixelZoom _glptr_glPixelZoom = _impl_glPixelZoom;

static void  GL_APIENTRY _impl_glLightfv(GLenum light, GLenum pname, const GLfloat * params) {
	_glptr_glLightfv = (PFN_glLightfv)GalogenGetProcAddress("glLightfv");
	_glptr_glLightfv(light, pname, params);
}
PFN_glLightfv _glptr_glLightfv = _impl_glLightfv;

static void  GL_APIENTRY _impl_glRasterPos2f(GLfloat x, GLfloat y) {
	_glptr_glRasterPos2f = (PFN_glRasterPos2f)GalogenGetProcAddress("glRasterPos2f");
	_glptr_glRasterPos2f(x, y);
}
PFN_glRasterPos2f _glptr_glRasterPos2f = _impl_glRasterPos2f;

static void  GL_APIENTRY _impl_glTexParameteri(GLenum target, GLenum pname, GLint param) {
	_glptr_glTexParameteri = (PFN_glTexParameteri)GalogenGetProcAddress("glTexParameteri");
	_glptr_glTexParameteri(target, pname, param);
}
PFN_glTexParameteri _glptr_glTexParameteri = _impl_glTexParameteri;

static void  GL_APIENTRY _impl_glDrawBuffer(GLenum buf) {
	_glptr_glDrawBuffer = (PFN_glDrawBuffer)GalogenGetProcAddress("glDrawBuffer");
	_glptr_glDrawBuffer(buf);
}
PFN_glDrawBuffer _glptr_glDrawBuffer = _impl_glDrawBuffer;

static void  GL_APIENTRY _impl_glColor3bv(const GLbyte * v) {
	_glptr_glColor3bv = (PFN_glColor3bv)GalogenGetProcAddress("glColor3bv");
	_glptr_glColor3bv(v);
}
PFN_glColor3bv _glptr_glColor3bv = _impl_glColor3bv;

static void  GL_APIENTRY _impl_glVertex2sv(const GLshort * v) {
	_glptr_glVertex2sv = (PFN_glVertex2sv)GalogenGetProcAddress("glVertex2sv");
	_glptr_glVertex2sv(v);
}
PFN_glVertex2sv _glptr_glVertex2sv = _impl_glVertex2sv;

static void  GL_APIENTRY _impl_glEnable(GLenum cap) {
	_glptr_glEnable = (PFN_glEnable)GalogenGetProcAddress("glEnable");
	_glptr_glEnable(cap);
}
PFN_glEnable _glptr_glEnable = _impl_glEnable;

static void  GL_APIENTRY _impl_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
	_glptr_glColor3b = (PFN_glColor3b)GalogenGetProcAddress("glColor3b");
	_glptr_glColor3b(red, green, blue);
}
PFN_glColor3b _glptr_glColor3b = _impl_glColor3b;

static void  GL_APIENTRY _impl_glVertex2s(GLshort x, GLshort y) {
	_glptr_glVertex2s = (PFN_glVertex2s)GalogenGetProcAddress("glVertex2s");
	_glptr_glVertex2s(x, y);
}
PFN_glVertex2s _glptr_glVertex2s = _impl_glVertex2s;

static void  GL_APIENTRY _impl_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
	_glptr_glColor3f = (PFN_glColor3f)GalogenGetProcAddress("glColor3f");
	_glptr_glColor3f(red, green, blue);
}
PFN_glColor3f _glptr_glColor3f = _impl_glColor3f;

static void  GL_APIENTRY _impl_glIndexdv(const GLdouble * c) {
	_glptr_glIndexdv = (PFN_glIndexdv)GalogenGetProcAddress("glIndexdv");
	_glptr_glIndexdv(c);
}
PFN_glIndexdv _glptr_glIndexdv = _impl_glIndexdv;

static void  GL_APIENTRY _impl_glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) {
	_glptr_glGetMaterialfv = (PFN_glGetMaterialfv)GalogenGetProcAddress("glGetMaterialfv");
	_glptr_glGetMaterialfv(face, pname, params);
}
PFN_glGetMaterialfv _glptr_glGetMaterialfv = _impl_glGetMaterialfv;

static void  GL_APIENTRY _impl_glColor4ubv(const GLubyte * v) {
	_glptr_glColor4ubv = (PFN_glColor4ubv)GalogenGetProcAddress("glColor4ubv");
	_glptr_glColor4ubv(v);
}
PFN_glColor4ubv _glptr_glColor4ubv = _impl_glColor4ubv;

static void  GL_APIENTRY _impl_glVertex3sv(const GLshort * v) {
	_glptr_glVertex3sv = (PFN_glVertex3sv)GalogenGetProcAddress("glVertex3sv");
	_glptr_glVertex3sv(v);
}
PFN_glVertex3sv _glptr_glVertex3sv = _impl_glVertex3sv;

static void  GL_APIENTRY _impl_glRasterPos2fv(const GLfloat * v) {
	_glptr_glRasterPos2fv = (PFN_glRasterPos2fv)GalogenGetProcAddress("glRasterPos2fv");
	_glptr_glRasterPos2fv(v);
}
PFN_glRasterPos2fv _glptr_glRasterPos2fv = _impl_glRasterPos2fv;

static void  GL_APIENTRY _impl_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
	_glptr_glTexCoord3d = (PFN_glTexCoord3d)GalogenGetProcAddress("glTexCoord3d");
	_glptr_glTexCoord3d(s, t, r);
}
PFN_glTexCoord3d _glptr_glTexCoord3d = _impl_glTexCoord3d;

static void  GL_APIENTRY _impl_glDeleteLists(GLuint list, GLsizei range) {
	_glptr_glDeleteLists = (PFN_glDeleteLists)GalogenGetProcAddress("glDeleteLists");
	_glptr_glDeleteLists(list, range);
}
PFN_glDeleteLists _glptr_glDeleteLists = _impl_glDeleteLists;

static void  GL_APIENTRY _impl_glMaterialiv(GLenum face, GLenum pname, const GLint * params) {
	_glptr_glMaterialiv = (PFN_glMaterialiv)GalogenGetProcAddress("glMaterialiv");
	_glptr_glMaterialiv(face, pname, params);
}
PFN_glMaterialiv _glptr_glMaterialiv = _impl_glMaterialiv;

static void  GL_APIENTRY _impl_glStencilMask(GLuint mask) {
	_glptr_glStencilMask = (PFN_glStencilMask)GalogenGetProcAddress("glStencilMask");
	_glptr_glStencilMask(mask);
}
PFN_glStencilMask _glptr_glStencilMask = _impl_glStencilMask;

static void  GL_APIENTRY _impl_glPolygonStipple(const GLubyte * mask) {
	_glptr_glPolygonStipple = (PFN_glPolygonStipple)GalogenGetProcAddress("glPolygonStipple");
	_glptr_glPolygonStipple(mask);
}
PFN_glPolygonStipple _glptr_glPolygonStipple = _impl_glPolygonStipple;

static void  GL_APIENTRY _impl_glMateriali(GLenum face, GLenum pname, GLint param) {
	_glptr_glMateriali = (PFN_glMateriali)GalogenGetProcAddress("glMateriali");
	_glptr_glMateriali(face, pname, param);
}
PFN_glMateriali _glptr_glMateriali = _impl_glMateriali;

static void  GL_APIENTRY _impl_glRectsv(const GLshort * v1, const GLshort * v2) {
	_glptr_glRectsv = (PFN_glRectsv)GalogenGetProcAddress("glRectsv");
	_glptr_glRectsv(v1, v2);
}
PFN_glRectsv _glptr_glRectsv = _impl_glRectsv;

static void  GL_APIENTRY _impl_glEndList() {
	_glptr_glEndList = (PFN_glEndList)GalogenGetProcAddress("glEndList");
	_glptr_glEndList();
}
PFN_glEndList _glptr_glEndList = _impl_glEndList;

static void  GL_APIENTRY _impl_glNormal3fv(const GLfloat * v) {
	_glptr_glNormal3fv = (PFN_glNormal3fv)GalogenGetProcAddress("glNormal3fv");
	_glptr_glNormal3fv(v);
}
PFN_glNormal3fv _glptr_glNormal3fv = _impl_glNormal3fv;

static void  GL_APIENTRY _impl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) {
	_glptr_glGetTexParameterfv = (PFN_glGetTexParameterfv)GalogenGetProcAddress("glGetTexParameterfv");
	_glptr_glGetTexParameterfv(target, pname, params);
}
PFN_glGetTexParameterfv _glptr_glGetTexParameterfv = _impl_glGetTexParameterfv;

static void  GL_APIENTRY _impl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
	_glptr_glViewport = (PFN_glViewport)GalogenGetProcAddress("glViewport");
	_glptr_glViewport(x, y, width, height);
}
PFN_glViewport _glptr_glViewport = _impl_glViewport;

static void  GL_APIENTRY _impl_glVertex3i(GLint x, GLint y, GLint z) {
	_glptr_glVertex3i = (PFN_glVertex3i)GalogenGetProcAddress("glVertex3i");
	_glptr_glVertex3i(x, y, z);
}
PFN_glVertex3i _glptr_glVertex3i = _impl_glVertex3i;

static void  GL_APIENTRY _impl_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
	_glptr_glColor4ub = (PFN_glColor4ub)GalogenGetProcAddress("glColor4ub");
	_glptr_glColor4ub(red, green, blue, alpha);
}
PFN_glColor4ub _glptr_glColor4ub = _impl_glColor4ub;

static void  GL_APIENTRY _impl_glAlphaFunc(GLenum func, GLfloat ref) {
	_glptr_glAlphaFunc = (PFN_glAlphaFunc)GalogenGetProcAddress("glAlphaFunc");
	_glptr_glAlphaFunc(func, ref);
}
PFN_glAlphaFunc _glptr_glAlphaFunc = _impl_glAlphaFunc;

static void  GL_APIENTRY _impl_glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) {
	_glptr_glTexGenfv = (PFN_glTexGenfv)GalogenGetProcAddress("glTexGenfv");
	_glptr_glTexGenfv(coord, pname, params);
}
PFN_glTexGenfv _glptr_glTexGenfv = _impl_glTexGenfv;

static void  GL_APIENTRY _impl_glDisable(GLenum cap) {
	_glptr_glDisable = (PFN_glDisable)GalogenGetProcAddress("glDisable");
	_glptr_glDisable(cap);
}
PFN_glDisable _glptr_glDisable = _impl_glDisable;

static void  GL_APIENTRY _impl_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
	_glptr_glTexCoord3f = (PFN_glTexCoord3f)GalogenGetProcAddress("glTexCoord3f");
	_glptr_glTexCoord3f(s, t, r);
}
PFN_glTexCoord3f _glptr_glTexCoord3f = _impl_glTexCoord3f;

static void  GL_APIENTRY _impl_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
	_glptr_glGetTexImage = (PFN_glGetTexImage)GalogenGetProcAddress("glGetTexImage");
	_glptr_glGetTexImage(target, level, format, type, pixels);
}
PFN_glGetTexImage _glptr_glGetTexImage = _impl_glGetTexImage;

static GLboolean GL_APIENTRY _impl_glIsEnabled(GLenum cap) {
	_glptr_glIsEnabled = (PFN_glIsEnabled)GalogenGetProcAddress("glIsEnabled");
	return _glptr_glIsEnabled(cap);
}
PFN_glIsEnabled _glptr_glIsEnabled = _impl_glIsEnabled;

static void  GL_APIENTRY _impl_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
	_glptr_glGetTexLevelParameteriv = (PFN_glGetTexLevelParameteriv)GalogenGetProcAddress("glGetTexLevelParameteriv");
	_glptr_glGetTexLevelParameteriv(target, level, pname, params);
}
PFN_glGetTexLevelParameteriv _glptr_glGetTexLevelParameteriv = _impl_glGetTexLevelParameteriv;

static GLenum GL_APIENTRY _impl_glGetError() {
	_glptr_glGetError = (PFN_glGetError)GalogenGetProcAddress("glGetError");
	return _glptr_glGetError();
}
PFN_glGetError _glptr_glGetError = _impl_glGetError;

static void  GL_APIENTRY _impl_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_glptr_glClearColor = (PFN_glClearColor)GalogenGetProcAddress("glClearColor");
	_glptr_glClearColor(red, green, blue, alpha);
}
PFN_glClearColor _glptr_glClearColor = _impl_glClearColor;

static void  GL_APIENTRY _impl_glColor3ubv(const GLubyte * v) {
	_glptr_glColor3ubv = (PFN_glColor3ubv)GalogenGetProcAddress("glColor3ubv");
	_glptr_glColor3ubv(v);
}
PFN_glColor3ubv _glptr_glColor3ubv = _impl_glColor3ubv;

static void  GL_APIENTRY _impl_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
	_glptr_glRects = (PFN_glRects)GalogenGetProcAddress("glRects");
	_glptr_glRects(x1, y1, x2, y2);
}
PFN_glRects _glptr_glRects = _impl_glRects;

static void  GL_APIENTRY _impl_glMatrixMode(GLenum mode) {
	_glptr_glMatrixMode = (PFN_glMatrixMode)GalogenGetProcAddress("glMatrixMode");
	_glptr_glMatrixMode(mode);
}
PFN_glMatrixMode _glptr_glMatrixMode = _impl_glMatrixMode;

static void  GL_APIENTRY _impl_glRasterPos3dv(const GLdouble * v) {
	_glptr_glRasterPos3dv = (PFN_glRasterPos3dv)GalogenGetProcAddress("glRasterPos3dv");
	_glptr_glRasterPos3dv(v);
}
PFN_glRasterPos3dv _glptr_glRasterPos3dv = _impl_glRasterPos3dv;

static void  GL_APIENTRY _impl_glGetIntegerv(GLenum pname, GLint * data) {
	_glptr_glGetIntegerv = (PFN_glGetIntegerv)GalogenGetProcAddress("glGetIntegerv");
	_glptr_glGetIntegerv(pname, data);
}
PFN_glGetIntegerv _glptr_glGetIntegerv = _impl_glGetIntegerv;

static void  GL_APIENTRY _impl_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
	_glptr_glGetTexLevelParameterfv = (PFN_glGetTexLevelParameterfv)GalogenGetProcAddress("glGetTexLevelParameterfv");
	_glptr_glGetTexLevelParameterfv(target, level, pname, params);
}
PFN_glGetTexLevelParameterfv _glptr_glGetTexLevelParameterfv = _impl_glGetTexLevelParameterfv;

static void  GL_APIENTRY _impl_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	_glptr_glVertex4f = (PFN_glVertex4f)GalogenGetProcAddress("glVertex4f");
	_glptr_glVertex4f(x, y, z, w);
}
PFN_glVertex4f _glptr_glVertex4f = _impl_glVertex4f;

static void  GL_APIENTRY _impl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
	_glptr_glReadPixels = (PFN_glReadPixels)GalogenGetProcAddress("glReadPixels");
	_glptr_glReadPixels(x, y, width, height, format, type, pixels);
}
PFN_glReadPixels _glptr_glReadPixels = _impl_glReadPixels;

static void  GL_APIENTRY _impl_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
	_glptr_glTexParameterf = (PFN_glTexParameterf)GalogenGetProcAddress("glTexParameterf");
	_glptr_glTexParameterf(target, pname, param);
}
PFN_glTexParameterf _glptr_glTexParameterf = _impl_glTexParameterf;

static void  GL_APIENTRY _impl_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
	_glptr_glColor4d = (PFN_glColor4d)GalogenGetProcAddress("glColor4d");
	_glptr_glColor4d(red, green, blue, alpha);
}
PFN_glColor4d _glptr_glColor4d = _impl_glColor4d;

static void  GL_APIENTRY _impl_glGetPixelMapfv(GLenum map, GLfloat * values) {
	_glptr_glGetPixelMapfv = (PFN_glGetPixelMapfv)GalogenGetProcAddress("glGetPixelMapfv");
	_glptr_glGetPixelMapfv(map, values);
}
PFN_glGetPixelMapfv _glptr_glGetPixelMapfv = _impl_glGetPixelMapfv;

static void  GL_APIENTRY _impl_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
	_glptr_glRectf = (PFN_glRectf)GalogenGetProcAddress("glRectf");
	_glptr_glRectf(x1, y1, x2, y2);
}
PFN_glRectf _glptr_glRectf = _impl_glRectf;

static void  GL_APIENTRY _impl_glDepthFunc(GLenum func) {
	_glptr_glDepthFunc = (PFN_glDepthFunc)GalogenGetProcAddress("glDepthFunc");
	_glptr_glDepthFunc(func);
}
PFN_glDepthFunc _glptr_glDepthFunc = _impl_glDepthFunc;

static void  GL_APIENTRY _impl_glFogiv(GLenum pname, const GLint * params) {
	_glptr_glFogiv = (PFN_glFogiv)GalogenGetProcAddress("glFogiv");
	_glptr_glFogiv(pname, params);
}
PFN_glFogiv _glptr_glFogiv = _impl_glFogiv;

static void  GL_APIENTRY _impl_glNewList(GLuint list, GLenum mode) {
	_glptr_glNewList = (PFN_glNewList)GalogenGetProcAddress("glNewList");
	_glptr_glNewList(list, mode);
}
PFN_glNewList _glptr_glNewList = _impl_glNewList;

static void  GL_APIENTRY _impl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
	_glptr_glStencilOp = (PFN_glStencilOp)GalogenGetProcAddress("glStencilOp");
	_glptr_glStencilOp(fail, zfail, zpass);
}
PFN_glStencilOp _glptr_glStencilOp = _impl_glStencilOp;

static void  GL_APIENTRY _impl_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
	_glptr_glStencilFunc = (PFN_glStencilFunc)GalogenGetProcAddress("glStencilFunc");
	_glptr_glStencilFunc(func, ref, mask);
}
PFN_glStencilFunc _glptr_glStencilFunc = _impl_glStencilFunc;

static void  GL_APIENTRY _impl_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
	_glptr_glColor4b = (PFN_glColor4b)GalogenGetProcAddress("glColor4b");
	_glptr_glColor4b(red, green, blue, alpha);
}
PFN_glColor4b _glptr_glColor4b = _impl_glColor4b;

static void  GL_APIENTRY _impl_glBlendFunc(GLenum sfactor, GLenum dfactor) {
	_glptr_glBlendFunc = (PFN_glBlendFunc)GalogenGetProcAddress("glBlendFunc");
	_glptr_glBlendFunc(sfactor, dfactor);
}
PFN_glBlendFunc _glptr_glBlendFunc = _impl_glBlendFunc;

static void  GL_APIENTRY _impl_glTexCoord3sv(const GLshort * v) {
	_glptr_glTexCoord3sv = (PFN_glTexCoord3sv)GalogenGetProcAddress("glTexCoord3sv");
	_glptr_glTexCoord3sv(v);
}
PFN_glTexCoord3sv _glptr_glTexCoord3sv = _impl_glTexCoord3sv;

static void  GL_APIENTRY _impl_glEvalCoord2d(GLdouble u, GLdouble v) {
	_glptr_glEvalCoord2d = (PFN_glEvalCoord2d)GalogenGetProcAddress("glEvalCoord2d");
	_glptr_glEvalCoord2d(u, v);
}
PFN_glEvalCoord2d _glptr_glEvalCoord2d = _impl_glEvalCoord2d;

static void  GL_APIENTRY _impl_glShadeModel(GLenum mode) {
	_glptr_glShadeModel = (PFN_glShadeModel)GalogenGetProcAddress("glShadeModel");
	_glptr_glShadeModel(mode);
}
PFN_glShadeModel _glptr_glShadeModel = _impl_glShadeModel;

static void  GL_APIENTRY _impl_glTexCoord2iv(const GLint * v) {
	_glptr_glTexCoord2iv = (PFN_glTexCoord2iv)GalogenGetProcAddress("glTexCoord2iv");
	_glptr_glTexCoord2iv(v);
}
PFN_glTexCoord2iv _glptr_glTexCoord2iv = _impl_glTexCoord2iv;

static void  GL_APIENTRY _impl_glColor4usv(const GLushort * v) {
	_glptr_glColor4usv = (PFN_glColor4usv)GalogenGetProcAddress("glColor4usv");
	_glptr_glColor4usv(v);
}
PFN_glColor4usv _glptr_glColor4usv = _impl_glColor4usv;

static void  GL_APIENTRY _impl_glLineStipple(GLint factor, GLushort pattern) {
	_glptr_glLineStipple = (PFN_glLineStipple)GalogenGetProcAddress("glLineStipple");
	_glptr_glLineStipple(factor, pattern);
}
PFN_glLineStipple _glptr_glLineStipple = _impl_glLineStipple;

static void  GL_APIENTRY _impl_glVertex4iv(const GLint * v) {
	_glptr_glVertex4iv = (PFN_glVertex4iv)GalogenGetProcAddress("glVertex4iv");
	_glptr_glVertex4iv(v);
}
PFN_glVertex4iv _glptr_glVertex4iv = _impl_glVertex4iv;

static void  GL_APIENTRY _impl_glPixelStorei(GLenum pname, GLint param) {
	_glptr_glPixelStorei = (PFN_glPixelStorei)GalogenGetProcAddress("glPixelStorei");
	_glptr_glPixelStorei(pname, param);
}
PFN_glPixelStorei _glptr_glPixelStorei = _impl_glPixelStorei;

static void  GL_APIENTRY _impl_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) {
	_glptr_glGetTexEnvfv = (PFN_glGetTexEnvfv)GalogenGetProcAddress("glGetTexEnvfv");
	_glptr_glGetTexEnvfv(target, pname, params);
}
PFN_glGetTexEnvfv _glptr_glGetTexEnvfv = _impl_glGetTexEnvfv;

static void  GL_APIENTRY _impl_glLineWidth(GLfloat width) {
	_glptr_glLineWidth = (PFN_glLineWidth)GalogenGetProcAddress("glLineWidth");
	_glptr_glLineWidth(width);
}
PFN_glLineWidth _glptr_glLineWidth = _impl_glLineWidth;

static void  GL_APIENTRY _impl_glCallList(GLuint list) {
	_glptr_glCallList = (PFN_glCallList)GalogenGetProcAddress("glCallList");
	_glptr_glCallList(list);
}
PFN_glCallList _glptr_glCallList = _impl_glCallList;

static void  GL_APIENTRY _impl_glVertex3iv(const GLint * v) {
	_glptr_glVertex3iv = (PFN_glVertex3iv)GalogenGetProcAddress("glVertex3iv");
	_glptr_glVertex3iv(v);
}
PFN_glVertex3iv _glptr_glVertex3iv = _impl_glVertex3iv;

static void  GL_APIENTRY _impl_glPointSize(GLfloat size) {
	_glptr_glPointSize = (PFN_glPointSize)GalogenGetProcAddress("glPointSize");
	_glptr_glPointSize(size);
}
PFN_glPointSize _glptr_glPointSize = _impl_glPointSize;

static void  GL_APIENTRY _impl_glVertex2i(GLint x, GLint y) {
	_glptr_glVertex2i = (PFN_glVertex2i)GalogenGetProcAddress("glVertex2i");
	_glptr_glVertex2i(x, y);
}
PFN_glVertex2i _glptr_glVertex2i = _impl_glVertex2i;

static void  GL_APIENTRY _impl_glReadBuffer(GLenum src) {
	_glptr_glReadBuffer = (PFN_glReadBuffer)GalogenGetProcAddress("glReadBuffer");
	_glptr_glReadBuffer(src);
}
PFN_glReadBuffer _glptr_glReadBuffer = _impl_glReadBuffer;

static void  GL_APIENTRY _impl_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
	_glptr_glTexImage1D = (PFN_glTexImage1D)GalogenGetProcAddress("glTexImage1D");
	_glptr_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}
PFN_glTexImage1D _glptr_glTexImage1D = _impl_glTexImage1D;

static void  GL_APIENTRY _impl_glRasterPos2sv(const GLshort * v) {
	_glptr_glRasterPos2sv = (PFN_glRasterPos2sv)GalogenGetProcAddress("glRasterPos2sv");
	_glptr_glRasterPos2sv(v);
}
PFN_glRasterPos2sv _glptr_glRasterPos2sv = _impl_glRasterPos2sv;

static void  GL_APIENTRY _impl_glTexCoord3dv(const GLdouble * v) {
	_glptr_glTexCoord3dv = (PFN_glTexCoord3dv)GalogenGetProcAddress("glTexCoord3dv");
	_glptr_glTexCoord3dv(v);
}
PFN_glTexCoord3dv _glptr_glTexCoord3dv = _impl_glTexCoord3dv;

static GLuint GL_APIENTRY _impl_glGenLists(GLsizei range) {
	_glptr_glGenLists = (PFN_glGenLists)GalogenGetProcAddress("glGenLists");
	return _glptr_glGenLists(range);
}
PFN_glGenLists _glptr_glGenLists = _impl_glGenLists;

static void  GL_APIENTRY _impl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
	_glptr_glTexParameterfv = (PFN_glTexParameterfv)GalogenGetProcAddress("glTexParameterfv");
	_glptr_glTexParameterfv(target, pname, params);
}
PFN_glTexParameterfv _glptr_glTexParameterfv = _impl_glTexParameterfv;

static void  GL_APIENTRY _impl_glTexEnvi(GLenum target, GLenum pname, GLint param) {
	_glptr_glTexEnvi = (PFN_glTexEnvi)GalogenGetProcAddress("glTexEnvi");
	_glptr_glTexEnvi(target, pname, param);
}
PFN_glTexEnvi _glptr_glTexEnvi = _impl_glTexEnvi;

static void  GL_APIENTRY _impl_glTexParameteriv(GLenum target, GLenum pname, const GLint * params) {
	_glptr_glTexParameteriv = (PFN_glTexParameteriv)GalogenGetProcAddress("glTexParameteriv");
	_glptr_glTexParameteriv(target, pname, params);
}
PFN_glTexParameteriv _glptr_glTexParameteriv = _impl_glTexParameteriv;

static void  GL_APIENTRY _impl_glTexCoord3iv(const GLint * v) {
	_glptr_glTexCoord3iv = (PFN_glTexCoord3iv)GalogenGetProcAddress("glTexCoord3iv");
	_glptr_glTexCoord3iv(v);
}
PFN_glTexCoord3iv _glptr_glTexCoord3iv = _impl_glTexCoord3iv;

static void  GL_APIENTRY _impl_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
	_glptr_glTexEnvf = (PFN_glTexEnvf)GalogenGetProcAddress("glTexEnvf");
	_glptr_glTexEnvf(target, pname, param);
}
PFN_glTexEnvf _glptr_glTexEnvf = _impl_glTexEnvf;

static void  GL_APIENTRY _impl_glDepthMask(GLboolean flag) {
	_glptr_glDepthMask = (PFN_glDepthMask)GalogenGetProcAddress("glDepthMask");
	_glptr_glDepthMask(flag);
}
PFN_glDepthMask _glptr_glDepthMask = _impl_glDepthMask;

static void  GL_APIENTRY _impl_glIndexfv(const GLfloat * c) {
	_glptr_glIndexfv = (PFN_glIndexfv)GalogenGetProcAddress("glIndexfv");
	_glptr_glIndexfv(c);
}
PFN_glIndexfv _glptr_glIndexfv = _impl_glIndexfv;

static void  GL_APIENTRY _impl_glClearDepth(GLdouble depth) {
	_glptr_glClearDepth = (PFN_glClearDepth)GalogenGetProcAddress("glClearDepth");
	_glptr_glClearDepth(depth);
}
PFN_glClearDepth _glptr_glClearDepth = _impl_glClearDepth;

static const GLubyte * GL_APIENTRY _impl_glGetString(GLenum name) {
	_glptr_glGetString = (PFN_glGetString)GalogenGetProcAddress("glGetString");
	return _glptr_glGetString(name);
}
PFN_glGetString _glptr_glGetString = _impl_glGetString;

static void  GL_APIENTRY _impl_glColor3fv(const GLfloat * v) {
	_glptr_glColor3fv = (PFN_glColor3fv)GalogenGetProcAddress("glColor3fv");
	_glptr_glColor3fv(v);
}
PFN_glColor3fv _glptr_glColor3fv = _impl_glColor3fv;

static void  GL_APIENTRY _impl_glLogicOp(GLenum opcode) {
	_glptr_glLogicOp = (PFN_glLogicOp)GalogenGetProcAddress("glLogicOp");
	_glptr_glLogicOp(opcode);
}
PFN_glLogicOp _glptr_glLogicOp = _impl_glLogicOp;

static void  GL_APIENTRY _impl_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
	_glptr_glMapGrid2d = (PFN_glMapGrid2d)GalogenGetProcAddress("glMapGrid2d");
	_glptr_glMapGrid2d(un, u1, u2, vn, v1, v2);
}
PFN_glMapGrid2d _glptr_glMapGrid2d = _impl_glMapGrid2d;

static void  GL_APIENTRY _impl_glTexCoord2dv(const GLdouble * v) {
	_glptr_glTexCoord2dv = (PFN_glTexCoord2dv)GalogenGetProcAddress("glTexCoord2dv");
	_glptr_glTexCoord2dv(v);
}
PFN_glTexCoord2dv _glptr_glTexCoord2dv = _impl_glTexCoord2dv;

static void  GL_APIENTRY _impl_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
	_glptr_glRecti = (PFN_glRecti)GalogenGetProcAddress("glRecti");
	_glptr_glRecti(x1, y1, x2, y2);
}
PFN_glRecti _glptr_glRecti = _impl_glRecti;

static void  GL_APIENTRY _impl_glClear(GLbitfield mask) {
	_glptr_glClear = (PFN_glClear)GalogenGetProcAddress("glClear");
	_glptr_glClear(mask);
}
PFN_glClear _glptr_glClear = _impl_glClear;

static void  GL_APIENTRY _impl_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
	_glptr_glMap1d = (PFN_glMap1d)GalogenGetProcAddress("glMap1d");
	_glptr_glMap1d(target, u1, u2, stride, order, points);
}
PFN_glMap1d _glptr_glMap1d = _impl_glMap1d;

static void  GL_APIENTRY _impl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
	_glptr_glTexImage2D = (PFN_glTexImage2D)GalogenGetProcAddress("glTexImage2D");
	_glptr_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}
PFN_glTexImage2D _glptr_glTexImage2D = _impl_glTexImage2D;

static void  GL_APIENTRY _impl_glLightf(GLenum light, GLenum pname, GLfloat param) {
	_glptr_glLightf = (PFN_glLightf)GalogenGetProcAddress("glLightf");
	_glptr_glLightf(light, pname, param);
}
PFN_glLightf _glptr_glLightf = _impl_glLightf;

static void  GL_APIENTRY _impl_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
	_glptr_glColor4i = (PFN_glColor4i)GalogenGetProcAddress("glColor4i");
	_glptr_glColor4i(red, green, blue, alpha);
}
PFN_glColor4i _glptr_glColor4i = _impl_glColor4i;

static void  GL_APIENTRY _impl_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
	_glptr_glTexCoord4f = (PFN_glTexCoord4f)GalogenGetProcAddress("glTexCoord4f");
	_glptr_glTexCoord4f(s, t, r, q);
}
PFN_glTexCoord4f _glptr_glTexCoord4f = _impl_glTexCoord4f;

static void  GL_APIENTRY _impl_glClearStencil(GLint s) {
	_glptr_glClearStencil = (PFN_glClearStencil)GalogenGetProcAddress("glClearStencil");
	_glptr_glClearStencil(s);
}
PFN_glClearStencil _glptr_glClearStencil = _impl_glClearStencil;

static void  GL_APIENTRY _impl_glRectiv(const GLint * v1, const GLint * v2) {
	_glptr_glRectiv = (PFN_glRectiv)GalogenGetProcAddress("glRectiv");
	_glptr_glRectiv(v1, v2);
}
PFN_glRectiv _glptr_glRectiv = _impl_glRectiv;

static void  GL_APIENTRY _impl_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
	_glptr_glColor4ui = (PFN_glColor4ui)GalogenGetProcAddress("glColor4ui");
	_glptr_glColor4ui(red, green, blue, alpha);
}
PFN_glColor4ui _glptr_glColor4ui = _impl_glColor4ui;

static void  GL_APIENTRY _impl_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
	_glptr_glColor4s = (PFN_glColor4s)GalogenGetProcAddress("glColor4s");
	_glptr_glColor4s(red, green, blue, alpha);
}
PFN_glColor4s _glptr_glColor4s = _impl_glColor4s;

static void  GL_APIENTRY _impl_glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) {
	_glptr_glGetTexParameteriv = (PFN_glGetTexParameteriv)GalogenGetProcAddress("glGetTexParameteriv");
	_glptr_glGetTexParameteriv(target, pname, params);
}
PFN_glGetTexParameteriv _glptr_glGetTexParameteriv = _impl_glGetTexParameteriv;

static void  GL_APIENTRY _impl_glFrontFace(GLenum mode) {
	_glptr_glFrontFace = (PFN_glFrontFace)GalogenGetProcAddress("glFrontFace");
	_glptr_glFrontFace(mode);
}
PFN_glFrontFace _glptr_glFrontFace = _impl_glFrontFace;

static void  GL_APIENTRY _impl_glDepthRange(GLdouble n, GLdouble f) {
	_glptr_glDepthRange = (PFN_glDepthRange)GalogenGetProcAddress("glDepthRange");
	_glptr_glDepthRange(n, f);
}
PFN_glDepthRange _glptr_glDepthRange = _impl_glDepthRange;

static void  GL_APIENTRY _impl_glCullFace(GLenum mode) {
	_glptr_glCullFace = (PFN_glCullFace)GalogenGetProcAddress("glCullFace");
	_glptr_glCullFace(mode);
}
PFN_glCullFace _glptr_glCullFace = _impl_glCullFace;

